<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git常用命令</title>
    <link href="/2021/08/30/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/08/30/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init <span class="hljs-comment"># 初始化本地库</span><br>git status <span class="hljs-comment"># 查看本地库状态</span><br>git add 文件名 <span class="hljs-comment"># 添加暂存区</span><br>git commit -m <span class="hljs-string">&quot;日志信息&quot;</span> <span class="hljs-comment"># 提交本地库</span><br></code></pre></td></tr></table></figure><h3 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reflog <span class="hljs-comment"># 查看版本信息</span><br>git <span class="hljs-built_in">log</span> <span class="hljs-comment"># 查看版本详细信息</span><br>git reset --hard 版本号 <span class="hljs-comment"># 版本穿梭</span><br></code></pre></td></tr></table></figure><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -v <span class="hljs-comment"># 查看分支</span><br>git branch 分支名 <span class="hljs-comment"># 创建分支</span><br>git checkout 分支名 <span class="hljs-comment"># 切换分支</span><br>git merge 分支名 <span class="hljs-comment"># 把指定的分支合并到当前分支上</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210828205527.png"></p><h4 id="分支冲突"><a href="#分支冲突" class="headerlink" title="分支冲突"></a>分支冲突</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status <span class="hljs-comment"># 查看本地库状态 定位冲突文件</span><br><span class="hljs-comment"># 特殊符号: &lt;&lt;&lt;&lt;&lt;&lt;&lt; 当前分支 当前分支的代码 ======= 合并过来的代码 &gt;&gt;&gt;&gt;&gt;&gt;&gt; 其他分支</span><br><span class="hljs-comment"># 编辑有冲突的文件 删除特殊符号</span><br>git add<br>git commit -m <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure><h3 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add 别名 远程地址 <span class="hljs-comment"># 起别名 eg. git remote add origin 远程地址</span><br>git remote -v <span class="hljs-comment"># 查看当前所有远程地址别名</span><br>git <span class="hljs-built_in">clone</span> 远程地址<br>git pull 别名 远程分支名 <span class="hljs-comment"># 将远程仓库对应分支最新内容拉下来后与当前本地分支直接合并</span><br>git push 别名 本地分支名:远程分支名 <span class="hljs-comment"># 若如果本地分支名与远程分支名相同 则可以省略冒号和远程分支名</span><br></code></pre></td></tr></table></figure><h4 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin main <span class="hljs-comment"># 将远程仓库里面的项目拉下来</span><br>dir <span class="hljs-comment"># 查看有哪些文件夹</span><br>git rm -r --cached .idea <span class="hljs-comment"># 删除.idea文件夹</span><br>git commit -m <span class="hljs-string">&#x27;delete .idea&#x27;</span> <span class="hljs-comment"># 提交 添加操作说明</span><br>git push origin main <span class="hljs-comment"># 将本次更改更新到github项目上去</span><br></code></pre></td></tr></table></figure><h3 id="IDEA-集成-Git"><a href="#IDEA-集成-Git" class="headerlink" title="IDEA 集成 Git"></a>IDEA 集成 Git</h3><h4 id="配置-Git-忽略文件"><a href="#配置-Git-忽略文件" class="headerlink" title="配置 Git 忽略文件"></a>配置 Git 忽略文件</h4><p>为什么要忽略他们？ </p><ul><li>与项目的实际功能无关，不参与服务器上部署运行，把它们忽略掉能够屏蔽 IDE 工具之间的差异</li></ul><p>怎么忽略？</p><ol><li><p>创建git.ignore文件</p><ul><li><p>这个文件的存放位置原则上在哪里都可以，为了便于让~/.gitconfig 文件引用，建议也放在用户家目录下</p></li><li><p>git.ignore 文件模版内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Compiled class file</span><br>*.class<br><span class="hljs-comment"># Log file</span><br>*.<span class="hljs-built_in">log</span><br><span class="hljs-comment"># BlueJ files</span><br>*.ctxt<br><span class="hljs-comment"># Mobile Tools for Java (J2ME)</span><br>.mtj.tmp/<br><span class="hljs-comment"># Package Files #</span><br>*.jar<br>*.war<br>*.nar<br>*.ear<br>*.zip<br>*.tar.gz<br>*.rar<br><span class="hljs-comment"># virtual machine crash logs, see </span><br>http://www.java.com/en/download/<span class="hljs-built_in">help</span>/error_hotspot.xml<br>hs_err_pid*<br>.classpath<br>.project<br>.settings<br>target<br>.idea<br>*.iml<br></code></pre></td></tr></table></figure></li></ul></li><li><p>在.gitconfig 文件中引用忽略配置文件</p><p>注意：这里要使用“正斜线（/）”，不要使用“反斜线（\）”</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[core]</span><br><span class="hljs-attr">excludesfile</span> = C:/Users/robin/git.ignore<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的DFS</title>
    <link href="/2021/08/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84DFS/"/>
    <url>/2021/08/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84DFS/</url>
    
    <content type="html"><![CDATA[<h3 id="1-二叉树剪枝"><a href="#1-二叉树剪枝" class="headerlink" title="1. 二叉树剪枝"></a>1. 二叉树剪枝</h3><p>一棵二叉树的所有节点的值要么是0要么是1，请剪除该二叉树中所有节点的值全都是0的子树。例如，在剪除图8.2（a）中二叉树中所有节点值都为0的子树之后的结果如图8.2（b）所示。</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210826180113.png"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li>后序遍历最适合用来解决这个问题。每遍历到一个节点，就要确定它是否有左右子树，<strong>如果左右子树都是空的，并且节点的值是0，那么就可以删除这个节点</strong>。</li><li>所谓删除一个节点，就是<strong>返回null给它的父节点</strong>，这样这个节点就从这棵二叉树中消失。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest.Tree_DFS;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pruneTree</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">pruneTree</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> root;<br><br>        root.left = pruneTree(root.left);<br>        root.right = pruneTree(root.right);<br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-keyword">null</span> &amp;&amp; root.right == <span class="hljs-keyword">null</span> &amp;&amp; root.val == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        pruneTree pruneTree = <span class="hljs-keyword">new</span> pruneTree();<br>        <span class="hljs-comment">// [1,0,1,0,0,0,1]</span><br>        TreeNode treeNode = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">1</span>);<br>        treeNode.left = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">0</span>);<br>        treeNode.right = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">1</span>);<br>        treeNode.left.left = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">0</span>);<br>        treeNode.left.right = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">0</span>);<br>        treeNode.right.left = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">0</span>);<br>        treeNode.right.right = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">1</span>);<br><br>        TreeNode res = pruneTree.pruneTree(treeNode);<br>        System.out.println(res.toString()); <span class="hljs-comment">// [1,null,1,null,1]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(h) h为树高</li></ul><h3 id="2-序列化和反序列化二叉树"><a href="#2-序列化和反序列化二叉树" class="headerlink" title="2. 序列化和反序列化二叉树"></a>2. 序列化和反序列化二叉树</h3><p>请设计一个算法将二叉树序列化成一个字符串，并能将该字符串反序列化出原来二叉树的算法。</p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><ul><li>先考虑如何将二叉树序列化为一个字符串。需要逐个遍历二叉树的每个节点，每遍历到一个节点就将节点的值序列化到字符串中。以<strong>前序遍历的顺序遍历二叉树最适合序列化</strong>。<strong>这样做的好处是在反序列化时最方便，从字符串中读出的第1个数值一定是根节点的值</strong>。</li><li>只把节点的值序列化到字符串中是不够的。首先，要用一个分隔符（如逗号）把不同的节点分隔开。其次，还要考虑如何才能在反序列化的时候构建不同结构的二叉树（即，空为”#“，保持结构）。</li><li>我们需要一个下标去扫描字符串数组nodeStrs中的每个字符串。通常用一个整数值来表示数组的下标，但在上述代码中却定义了一个长度为1的整数数组i。这是因为递归函数dfs每反序列化一个节点时下标就会增加1，并且函数的调用者需要知道下标增加了。如果函数dfs的第2个参数i是整数类型，那么即使在函数体内修改i的值，修改之后的值也不能传递给它的调用者。但把i定义为整数数组之后，可以修改整数数组中的数字，修改之后的数值就能传给它的调用者。<ul><li><strong>基本数据类型：值传递（传递拷贝 原值不变）</strong></li><li><strong>对象类型：引用传递（传递地址 修改原值）</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest.Tree_DFS;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">serialize_deserialize</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">serialize</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;#&quot;</span>;<br><br>        String left = serialize(root.left);<br>        String right = serialize(root.right);<br>        <span class="hljs-keyword">return</span> String.valueOf(root.val) + <span class="hljs-string">&quot;,&quot;</span> + left + <span class="hljs-string">&quot;,&quot;</span> + right;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">deserialize</span><span class="hljs-params">(String data)</span> </span>&#123;<br>        String[] nodeStrs = data.split(<span class="hljs-string">&quot;,&quot;</span>); <span class="hljs-comment">// 分隔之后的所有节点</span><br>        <span class="hljs-keyword">int</span>[] i = &#123;<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// 若传递整型 修改后调用者接收不到 值传递（传递拷贝 原值不变）</span><br>        <span class="hljs-keyword">return</span> dfs(nodeStrs, i);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> TreeNode <span class="hljs-title">dfs</span><span class="hljs-params">(String[] strs, <span class="hljs-keyword">int</span>[] i)</span> </span>&#123;<br>        String str = strs[i[<span class="hljs-number">0</span>]]; <span class="hljs-comment">// 只有一个值</span><br>        i[<span class="hljs-number">0</span>]++; <span class="hljs-comment">// 数组值+1 引用传递（传递地址 修改原值）</span><br><br>        <span class="hljs-keyword">if</span> (str.equals(<span class="hljs-string">&quot;#&quot;</span>)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br><br>        TreeNode node = <span class="hljs-keyword">new</span> TreeNode(Integer.valueOf(str));<br>        node.left = dfs(strs, i);<br>        node.right = dfs(strs, i);<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n) 只访问每个节点一次</li><li>空间复杂度：O(n)  递归使用的栈空间</li></ul><h3 id="3-从根节点到叶节点的路径数字之和"><a href="#3-从根节点到叶节点的路径数字之和" class="headerlink" title="3. 从根节点到叶节点的路径数字之和"></a>3. 从根节点到叶节点的路径数字之和</h3><p>在一棵二叉树中所有节点都在0～9的范围之内，从根节点到叶节点的路径表示一个数字。求二叉树中所有路径表示的数字之和。例如，图中的二叉树有3条从根节点到叶节点的路径，它们分别表示数字395、391和302，这3个数字之和是1088。</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210826214110.png"></p><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><ul><li>首先考虑<strong>如何计算路径表示的数字</strong>。顺着指向子节点的指针路径向下遍历二叉树，每到达一个节点，相当于在路径表示的数字末尾添加一位数字。例如，在最开始到达根节点时，它表示数字3。然后到达节点9，此时路径表示数字39（3×10+9=39）。然后向下到达节点5，此时路径表示数字395（39×10+5=395）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest.Tree_DFS;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sumNumbers</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sumNumbers</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> dfs(root, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> path)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <br>        path = path * <span class="hljs-number">10</span> + root.val;<br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-keyword">null</span> &amp;&amp; root.right == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> path;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dfs(root.left, path) + dfs(root.right, path);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n) 前序遍历</li><li>空间复杂度：O(1)  path</li></ul><h3 id="4-向下的路径节点值之和"><a href="#4-向下的路径节点值之和" class="headerlink" title="4. 向下的路径节点值之和"></a>4. 向下的路径节点值之和</h3><p>给定一棵二叉树和一个值sum，求二叉树中节点值之和等于sum的路径的数目。路径的定义为二叉树中顺着指向子节点的指针向下移动所经过的节点，但不一定从根节点开始，也不一定到叶节点结束。例如，在如图所示中的二叉树中有两条路径的节点值之和等于8，其中，第1条路径从节点5开始经过节点2到达节点1，第2条路径从节点2开始到节点6。</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210826215743.png"></p><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><ul><li><p>在这个题目中，二叉树的路径的定义发生了改变，它<strong>不一定从根节点开始，也不一定到叶节点结束</strong>。路径的起止节点的不确定性给计算路径经过的节点值之和带来了很大的难度。</p></li><li><p>如果在路径上移动时把所有累加的节点值之和都保存下来，就容易知道是否存在从任意节点出发的值为给定sum的路径。</p><ul><li>例如，当到达图中二叉树的根节点5时，从根节点开始的路径节点值之和是5。当到达节点2时，从根节点开始的路径经过的节点值之和是7。当到达节点6时，从根节点出发到当前节点的路径经过的节点值之和为13。由于要找出节点值之和为8的路径，而13与5的差值是8，这就说明从节点5的下一个节点（即节点2）开始到节点6结束的路径经过的节点值之和为8。</li></ul></li><li><p>可以采用二叉树深度优先搜索来解决与路径相关的问题。<strong>当遍历到一个节点时，先累加从根节点开始的路径上的节点值之和，再计算到它的左右子节点的路径的节点值之和</strong>。这就是典型的前序遍历的顺序。</p><ul><li>用参数path表示从根节点开始的路径已经累加的节点值之和，并保存到哈希表map中。哈希表的键是累加的节点值之和，哈希表的值是每个节点值之和出现的次数。当遍历到一个节点时，就把当前的节点值累加到参数path。如果这个和之前出现过，则将出现的次数加1；如果这个和之前没有出现过，那么这是它第1次出现。然后更新哈希表map保存累加节点值之和path及出现的次数。</li><li>辅助函数dfs实现了递归的前序遍历，该函数遍历到二叉树的一个节点时将递归地遍历它的子节点。因此，<strong>当该函数结束时，程序将回到节点的父节点</strong>，也就是说，<strong>在函数结束之前需要将当前节点从路径中删除，从根节点到当前节点累加的节点值之和也要从哈希表map中删除</strong>。这是在函数dfs返回之前更新哈希表map把参数path出现的次数减1的原因。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest.Tree_DFS;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pathNum</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pathNum</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> sum)</span> </span>&#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// path - sum == 0 -&gt; path == sum 初始为1</span><br>        <span class="hljs-keyword">return</span> dfs(root, sum, map, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> sum, Map&lt;Integer, Integer&gt; map, <span class="hljs-keyword">int</span> path)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        path += root.val;<br>        <span class="hljs-comment">// 若 path - sum 差值不在map中 则返回 0</span><br>        <span class="hljs-comment">// 若 path - sum 差值在map中 则获取次数 在这个次数基础上递归左右子树</span><br>        <span class="hljs-comment">// 若 path - sum == 0 -&gt; path == sum 初始map.put(0, 1); 值为1</span><br>        <span class="hljs-keyword">int</span> count = map.getOrDefault(path - sum, <span class="hljs-number">0</span>); <br>        <span class="hljs-comment">// 如果这个和之前出现过 则在原有次数上+1 </span><br>        <span class="hljs-comment">// 若没出现过 则0+1 表示第一次出现</span><br>        map.put(path, map.getOrDefault(path, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br><br>        count += dfs(root.left, sum, map, path);<br>        count += dfs(root.right, sum, map, path);<br><br>        <span class="hljs-comment">// 在函数结束之前需要将当前节点从路径中删除</span><br>        <span class="hljs-comment">// 从根节点到当前节点累加的节点值之和也要从哈希表map中删除</span><br>        map.put(path, map.get(path) - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n) 前序遍历</li><li>空间复杂度：O(n)  HashMap</li></ul><h3 id="5-节点值之和最大的路径"><a href="#5-节点值之和最大的路径" class="headerlink" title="5. 节点值之和最大的路径"></a>5. 节点值之和最大的路径</h3><p>在二叉树中将路径定义为顺着节点之间的连接<strong>从任意一个节点开始到达任意一个节点所经过的所有节点</strong>。路径中至少包含一个节点，不一定经过二叉树的根节点，也不一定经过叶节点。给定非空的一棵二叉树，请求出二叉树所有路径上节点值之和的最大值。例如，在如图8.6所示的二叉树中，从节点15开始经过节点20到达节点7的路径的节点值之和为42，是节点值之和最大的路径。</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210827212711.png"></p><h4 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h4><ul><li>这个题目中二叉树路径的定义又和前面的不同。这里的路径最主要的特点是<strong>路径有可能同时经过一个节点的左右子节点</strong>。<ul><li>例如，在图中，一条路径可以经过节点-9、节点20、节点15和节点-3；一条路径也可以经过节点15、节点20和节点7。</li></ul></li><li>值得注意的是，如果一条路径同时经过某个节点的左右子节点，那么该路径一定不能经过它的父节点。<ul><li>例如，在图中，经过节点20、节点15、节点7的路径不能经过节点-9。</li></ul></li><li>对于任意一个节点，如果最大和路径包含该节点，那么只可能是两种情况：<ol><li>其左右子树中所构成的和路径值较大的那个加上该节点的值后向父节点回溯构成最大路径</li><li>左右子树都在最大路径中，加上该节点的值构成了最终的最大路径</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest.Tree_DFS;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">maxPathSum</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSum = Integer.MIN_VALUE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxPathSum</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        dfs(root);<br>        <span class="hljs-keyword">return</span> maxSum;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 如果子树路径和为负则置0 表示最大路径不包含该子树</span><br>        <span class="hljs-keyword">int</span> left = Math.max(<span class="hljs-number">0</span>, dfs(root.left));<br>        <span class="hljs-keyword">int</span> right = Math.max(<span class="hljs-number">0</span>, dfs(root.right));<br>        <span class="hljs-comment">// maxSum可能为 左+根 右+根 左+右+根</span><br>        maxSum = Math.max(maxSum, root.val + left + right);<br><br>        <span class="hljs-comment">// 回溯父节点继续比较</span><br>        <span class="hljs-comment">// 由于同时经过左右子树的路径不能经过父节点</span><br>        <span class="hljs-comment">// 因此返回值是变量left与right的较大值加上当前节点root的值</span><br>        <span class="hljs-keyword">return</span> root.val + Math.max(left, right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度-4"><a href="#复杂度-4" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n) 后序遍历</li><li>空间复杂度：O(1)  maxSum</li></ul><p>参考：剑指Offer（专项突破版）</p>]]></content>
    
    
    <categories>
      
      <category>JZOffer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的前中后序遍历 递归or迭代</title>
    <link href="/2021/08/26/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%20%E9%80%92%E5%BD%92or%E8%BF%AD%E4%BB%A3/"/>
    <url>/2021/08/26/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%20%E9%80%92%E5%BD%92or%E8%BF%AD%E4%BB%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="前序遍历（根左右）"><a href="#前序遍历（根左右）" class="headerlink" title="前序遍历（根左右）"></a>前序遍历（根左右）</h3><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    List&lt;Integer&gt; nodes = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    dfs(root, nodes);<br>    <span class="hljs-keyword">return</span> nodes;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; nodes)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>        nodes.add(root.val);<br>        dfs(root.left, nodes);<br>        dfs(root.right, nodes);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    List&lt;Integer&gt; result = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    TreeNode cur = root;<br><br>    <span class="hljs-comment">// cur != null 继续压栈左子树</span><br>    <span class="hljs-comment">// cur == null 但 !stack.isEmpty() 出栈 压右子树</span><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span> || !stack.isEmpty()) &#123;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>            result.add(cur.val);<br>            stack.push(cur);<br>            cur = cur.left;<br>        &#125;<br>        cur = stack.pop();<br>        cur = cur.right;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中序遍历（左根右）"><a href="#中序遍历（左根右）" class="headerlink" title="中序遍历（左根右）"></a>中序遍历（左根右）</h3><h4 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    List&lt;Integer&gt; nodes = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    dfs(root, nodes);<br>    <span class="hljs-keyword">return</span> nodes;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; nodes)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>        dfs(root.left, nodes);<br>        nodes.add(root.val);<br>        dfs(root.right, nodes);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="迭代-1"><a href="#迭代-1" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    List&lt;Integer&gt; result = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    TreeNode cur = root;<br><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span> || !stack.isEmpty()) &#123;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>            stack.push(cur);<br>            cur = cur.left;<br>        &#125;<br>        cur = stack.pop();<br>        <span class="hljs-comment">// 左子树压栈完毕 放入结果列表</span><br>        result.add(cur.val);<br>        cur = cur.right;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后序遍历（左右根）"><a href="#后序遍历（左右根）" class="headerlink" title="后序遍历（左右根）"></a>后序遍历（左右根）</h3><h4 id="递归-2"><a href="#递归-2" class="headerlink" title="递归"></a>递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    List&lt;Integer&gt; nodes = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    dfs(root, nodes);<br>    <span class="hljs-keyword">return</span> nodes;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; nodes)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>        dfs(root.left, nodes);<br>        dfs(root.right, nodes);<br>        nodes.add(root.val);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="迭代-2"><a href="#迭代-2" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    List&lt;Integer&gt; result = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    TreeNode cur = root;<br>    TreeNode prev = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 记录上一个被遍历的节点 用来判断当前节点右子树是否被遍历</span><br><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span> || !stack.isEmpty()) &#123;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// cur = null; 不需再次压栈</span><br>            stack.push(cur);<br>            cur = cur.left;<br>        &#125;<br><br>        cur = stack.peek();<br>        <span class="hljs-keyword">if</span> (cur.right != <span class="hljs-keyword">null</span> &amp;&amp; cur.right != prev) &#123;<br>            <span class="hljs-comment">// 未遍历右子树 进行遍历</span><br>            cur = cur.right;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            stack.pop();<br>            <span class="hljs-comment">// 已遍历右子树 当前节点加入结果链表</span><br>            result.add(cur.val);<br>            prev = cur;<br>            cur = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 右子树之后是它的父节点 已存在栈中 不需再次压栈</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JZOffer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>双指针之数组</title>
    <link href="/2021/08/25/%E5%8F%8C%E6%8C%87%E9%92%88%E4%B9%8B%E6%95%B0%E7%BB%84/"/>
    <url>/2021/08/25/%E5%8F%8C%E6%8C%87%E9%92%88%E4%B9%8B%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>方向相反</strong>的双指针经常用来求<strong>排序数组中的 两个数字 之和</strong>。</p><blockquote><p>一个指针P1指向数组的第1个数字，另一个指针P2指向数组的最后一个数字，然后比较两个指针指向的数字之和及一个目标值。如果两个指针指向的数字之和大于目标值，则向左移动指针P2；如果两个指针指向的数字之和小于目标值，则向右移动指针P1。此时两个指针的移动方向是相反的。</p></blockquote><p><strong>方向相同</strong>的双指针通常用来求<strong>正数数组中 子数组 的和或乘积</strong>。</p><blockquote><p>初始化的时候两个指针P1和P2都指向数组的第1个数字。如果两个指针之间的子数组的和或乘积大于目标值，则向右移动指针P1删除子数组最左边的数字；如果两个指针之间的子数组的和或乘积小于目标值，则向右移动指针P2在子数组的右边增加新的数字。此时两个指针的移动方向是相同的。</p></blockquote><h3 id="1-排序数组中的两个数字之和"><a href="#1-排序数组中的两个数字之和" class="headerlink" title="1. 排序数组中的两个数字之和"></a>1. 排序数组中的两个数字之和</h3><p>输入一个递增排序的数组和一个值k，请问如何在数组中找出两个和为k的数字并返回它们的下标？假设数组中存在且只存在一对符合条件的数字，同时一个数字不能使用两次。例如，输入数组[1，2，4，6，10]，k的值为8，数组中的数字2与6的和为8，它们的下标分别为1与3。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">twoSum</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] numbers, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> j = numbers.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; numbers[i] + numbers[j] != target) &#123;<br>            <span class="hljs-keyword">if</span> (numbers[i] + numbers[j] &lt; target) i++;<br>            <span class="hljs-keyword">else</span> j--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;i, j&#125;;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        twoSum test = <span class="hljs-keyword">new</span> twoSum();<br>        <span class="hljs-keyword">int</span>[] twoSum = test.twoSum(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;, <span class="hljs-number">3</span>);<br>        System.out.println(Arrays.toString(twoSum)); <span class="hljs-comment">// [0, 1]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><h3 id="2-数组中和为0的3个数字"><a href="#2-数组中和为0的3个数字" class="headerlink" title="2. 数组中和为0的3个数字"></a>2. 数组中和为0的3个数字</h3><p>输入一个数组，如何找出数组中所有和为0的3个数字的三元组？需要注意的是，返回值中不得包含重复的三元组。例如，在数组[-1，0，1，2，-1，-4]中有两个三元组的和为0，它们分别是[-1，0，1]和[-1，-1，2]。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li>先对数组排序，然后就可以<strong>先固定一个数字i，再在排序数组中查找和为-i的两个数字</strong>。我们已经有了用O（n）时间在排序数组中找出和为给定值的两个数字的方法，由于需要固定数组中的每个数字，因此查找三元组的时间复杂度是O(n^2)。</li><li>如何去除重复的三元组？前面提到需要使用两个指针来找出和为给定值的两个数字。在找到一个和为0的三元组之后，就需要移动这两个指针，以便找出其他符合条件的三元组。<strong>在移动指针的时候需要跳过所有相同的值，以便过滤掉重复的三元组。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">threeSum</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="hljs-keyword">int</span>[] nums) &#123;<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (nums.length &gt;= <span class="hljs-number">3</span>) &#123;<br>            Arrays.sort(nums); <span class="hljs-comment">// 先排序</span><br>            <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (i &lt; nums.length - <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">// 预留2个位置给j,k</span><br>                twoSum(nums, i, res);<br>                <span class="hljs-keyword">int</span> temp = nums[i];<br>                <span class="hljs-keyword">while</span> (i &lt; nums.length &amp;&amp; nums[i] == temp) &#123; <span class="hljs-comment">// 避免重复</span><br>                    i++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-comment">// 在固定变量i指向的数字之后</span><br>    <span class="hljs-comment">// 函数twoSum在排序后的数组中找出所有下标大于i并且和为-nums[i]的两个数字</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, List&lt;List&lt;Integer&gt;&gt; res)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; <span class="hljs-comment">// start</span><br>        <span class="hljs-keyword">int</span> k = nums.length - <span class="hljs-number">1</span>; <span class="hljs-comment">// end</span><br>        <span class="hljs-keyword">while</span> (j &lt; k) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] + nums[j] + nums[k] == <span class="hljs-number">0</span>) &#123;<br>                res.add(Arrays.asList(nums[i], nums[j], nums[k]));<br>                <span class="hljs-keyword">int</span> temp = nums[j];<br>                <span class="hljs-keyword">while</span> (nums[j] == temp &amp;&amp; j &lt; k) &#123; <span class="hljs-comment">// 避免重复</span><br>                    j++;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i] + nums[j] + nums[k] &lt; <span class="hljs-number">0</span>) &#123;<br>                j++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                k--;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        threeSum threeSum = <span class="hljs-keyword">new</span> threeSum();<br>        List&lt;List&lt;Integer&gt;&gt; lists = threeSum.threeSum(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">4</span>&#125;);<br>        System.out.println(lists); <span class="hljs-comment">// [[-1, -1, 2], [-1, 0, 1]]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n^2)</li></ul><h3 id="3-和大于或等于k的最短子数组"><a href="#3-和大于或等于k的最短子数组" class="headerlink" title="3. 和大于或等于k的最短子数组"></a>3. 和大于或等于k的最短子数组</h3><p>输入一个正整数组成的数组和一个正整数k，请问数组中和大于或等于k的连续子数组的最短长度是多少？如果不存在所有数字之和大于或等于k的子数组，则返回0。例如，输入数组[5，1，4，3]，k的值为7，和大于或等于7的最短连续子数组是[4，3]，因此输出它的长度2。</p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><ul><li><strong>指针P1和P2初始化的时候都指向数组的第1个元素。</strong>当指针P1和P2之间的子数组数字之和小于k时，向右移动指针P2，直到两个指针之间的子数组数字之和大于k，否则向右移动指针P1，直到两个指针之间的子数组数字之和小于k。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">minSubArrayLen</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> minLen = Integer.MAX_VALUE;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>; right &lt; nums.length; right++) &#123;<br>            sum += nums[right];<br>            <span class="hljs-keyword">while</span> (left &lt;= right &amp;&amp; sum &gt;= k) &#123;<br>                minLen = Math.min(minLen, right - left + <span class="hljs-number">1</span>);<br>                sum -= nums[left++]; <span class="hljs-comment">// 先用再加</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> minLen;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        minSubArrayLen minSubArrayLen = <span class="hljs-keyword">new</span> minSubArrayLen();<br>        <span class="hljs-keyword">int</span> i = minSubArrayLen.minSubArrayLen(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>&#125;, <span class="hljs-number">7</span>);<br>        System.out.println(i); <span class="hljs-comment">// 2</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li><p>时间复杂度：O(n)</p><p>假设数组的长度为n，尽管上述代码中有两个嵌套的循环，该解法的时间复杂度仍然是O(n)。这是因为在这两个循环中，<strong>变量left和right都是只增加不减少（从头到尾走一遍）</strong>，变量right从0增加到n-1，变量left从0最多增加到n-1，因此总的执行次数是O(n)。</p></li></ul><h3 id="4-乘积小于k的子数组"><a href="#4-乘积小于k的子数组" class="headerlink" title="4. 乘积小于k的子数组"></a>4. 乘积小于k的子数组</h3><p>输入一个由正整数组成的数组和一个正整数k，请问数组中有多少个数字乘积小于k的连续子数组？例如，输入数组[10，5，2，6]，k的值为100，有8个子数组的所有数字的乘积小于100，它们分别是[10]、[5]、[2]、[6]、[10，5]、[5，2]、[2，6]和[5，2，6]。</p><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><ul><li>由于我们的目标是求出所有数字乘积小于k的子数组的个数，一旦向右移动指针P1到某个位置时子数组的乘积小于k，就不需要再向右移动指针P1。这是因为只要保持指针P2不动，向右移动指针P1形成的所有子数组的数字乘积就一定小于k。此时<strong>两个指针之间有多少个数字，就找到了多少个数字乘积小于k的子数组</strong>。</li><li>解释：其中以r结尾的满足条件的子数组共有r-l+1个，他们是：[l…r],[l+1…r]…[r-1,r],[r]。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">numSubarrayProductLessThanK</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numSubarrayProductLessThanK</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> product = <span class="hljs-number">1</span>; <span class="hljs-comment">// 乘积初始值</span><br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>; right &lt; nums.length; right++) &#123;<br>            product *= nums[right];<br>            <span class="hljs-keyword">while</span> (left &lt;= right &amp;&amp; product &gt;= k) &#123;<br>                product /= nums[left++]; <span class="hljs-comment">// 先除后右移</span><br>            &#125;<br>            count += right - left + <span class="hljs-number">1</span>; <br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        numSubarrayProductLessThanK test = <span class="hljs-keyword">new</span> numSubarrayProductLessThanK();<br>        <span class="hljs-keyword">int</span> i = test.numSubarrayProductLessThanK(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>&#125;, <span class="hljs-number">100</span>);<br>        System.out.println(i); <span class="hljs-comment">// 8</span><br>        <span class="hljs-comment">// 10: 1</span><br>        <span class="hljs-comment">// 10,5: 2</span><br>        <span class="hljs-comment">// 5,2: 2</span><br>        <span class="hljs-comment">// 5,2,6: 3</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n)</li></ul><p>参考：剑指Offer（专项突破版）</p>]]></content>
    
    
    <categories>
      
      <category>JZOffer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>统计salary的累计和（窗口函数的使用）</title>
    <link href="/2021/08/21/%E7%BB%9F%E8%AE%A1salary%E7%9A%84%E7%B4%AF%E8%AE%A1%E5%92%8C%EF%BC%88%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%89/"/>
    <url>/2021/08/21/%E7%BB%9F%E8%AE%A1salary%E7%9A%84%E7%B4%AF%E8%AE%A1%E5%92%8C%EF%BC%88%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="统计salary的累计和running-total"><a href="#统计salary的累计和running-total" class="headerlink" title="统计salary的累计和running_total"></a>统计salary的累计和running_total</h3><p>按照salary的累计和running_total，其中running_total为前N个当前( to_date = ‘9999-01-01’)员工的salary累计和，其他以此类推。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `salaries` ( <br>    `emp_no` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `salary` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `from_date` <span class="hljs-type">date</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `to_date` <span class="hljs-type">date</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`emp_no`,`from_date`));<br></code></pre></td></tr></table></figure><p>输出格式：</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210821115541.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.emp_no, s.salary,<br><span class="hljs-built_in">sum</span>(salary) <span class="hljs-keyword">over</span> (<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> emp_no) <span class="hljs-keyword">as</span> running_total<br><span class="hljs-keyword">from</span> salaries s <span class="hljs-keyword">WHERE</span> to_date <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;9999-01-01&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>窗口函数用法：</strong></p><p>&lt;窗口函数&gt; OVER ( [PARTITION BY &lt;用于分组的列名&gt; ] ORDER BY &lt;用于排序的列名&gt; ）</p><p>*其中[ ]中的内容可以忽略</p><p><strong>&lt;窗口函数&gt;的位置，可以放以下两种函数：</strong></p><ul><li>专用窗口函数 rank，dense_rank，row_number等<ul><li>RANK()：在计算排序时，若存在相同位次，会跳过之后的位次（1，1，1，4）</li><li>DENSE_RANK()：在计算排序时，若存在相同位次，不会跳过之后的位次（1，1，1，2）</li><li>ROW_NUMBER()：这个函数赋予唯一的连续位次（前三条并列第一：1，2，3，4）</li></ul></li><li>聚合函数 如sum，avg，count，max，min等</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>薪水排名问题（自连接 &amp; &lt;=的使用）</title>
    <link href="/2021/08/13/%E8%96%AA%E6%B0%B4%E6%8E%92%E5%90%8D%E9%97%AE%E9%A2%98%EF%BC%88%E8%87%AA%E8%BF%9E%E6%8E%A5%E5%92%8C%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E%E5%8F%B7%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%89/"/>
    <url>/2021/08/13/%E8%96%AA%E6%B0%B4%E6%8E%92%E5%90%8D%E9%97%AE%E9%A2%98%EF%BC%88%E8%87%AA%E8%BF%9E%E6%8E%A5%E5%92%8C%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E%E5%8F%B7%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="查找薪水排名第二多的员工编号emp-no、薪水salary、last-name以及first-name，不能使用order-by"><a href="#查找薪水排名第二多的员工编号emp-no、薪水salary、last-name以及first-name，不能使用order-by" class="headerlink" title="查找薪水排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，不能使用order by"></a>查找薪水排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，不能使用order by</h3><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210813204531.png"></p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210813204601.png"></p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210813204643.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.emp_no, s.salary, e.last_name, e.first_name<br><span class="hljs-keyword">from</span> employees e <span class="hljs-keyword">join</span> salaries s <span class="hljs-keyword">on</span> e.emp_no <span class="hljs-operator">=</span> s.emp_no <br><span class="hljs-keyword">and</span> s.salary <span class="hljs-operator">=</span> <br>(<br>    <span class="hljs-keyword">select</span> s1.salary <span class="hljs-keyword">from</span> salaries s1 <span class="hljs-keyword">join</span> salaries s2 <span class="hljs-comment">-- 自连接</span><br>    <span class="hljs-keyword">on</span> s1.salary <span class="hljs-operator">&lt;=</span> s2.salary <span class="hljs-comment">-- 连接条件使用&lt;=</span><br>    <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> s1.salary<br>    <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> s2.salary) <span class="hljs-operator">=</span> <span class="hljs-number">2</span> <span class="hljs-comment">-- 筛选出小于等于前二的值 第三多就改成3（小于等于前三）</span><br>)<br></code></pre></td></tr></table></figure><p>本题的精髓在于 <strong><code>s1.salary &lt;= s2.salary</code>，意思是在输出s1.salary的情况下，有多少个s2.salary大于等于s1.salary</strong>，<code>having count(distinct s2.salary) = 2</code>筛选出有2个s2.salary大于等于s1.salary的，即为排名第二。</p><h3 id="对所有员工的薪水按照salary降序进行1-N的排名"><a href="#对所有员工的薪水按照salary降序进行1-N的排名" class="headerlink" title="对所有员工的薪水按照salary降序进行1-N的排名"></a>对所有员工的薪水按照salary降序进行1-N的排名</h3><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210821114105.png"></p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210821114124.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> s1.emp_no, s1.salary, <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> s2.salary) <span class="hljs-keyword">as</span> t_rank<br><span class="hljs-keyword">from</span> salaries s1 <span class="hljs-keyword">join</span> salaries s2<br><span class="hljs-keyword">on</span> s1.salary <span class="hljs-operator">&lt;=</span> s2.salary <span class="hljs-comment">-- 要加= 否则第一个rank就为0了</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> emp_no<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> s1.salary <span class="hljs-keyword">desc</span>, s1.emp_no <span class="hljs-keyword">asc</span><br></code></pre></td></tr></table></figure><p>例如：当s1.salary=72527时，有3个s2.salary（分别为88958，72527，72527）大于等于它，但由于72527重复，利用<code>count(distinct s2.salary)</code>去重可得工资为72527的t_rank等于2。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>回溯：全排列与N皇后</title>
    <link href="/2021/08/06/%E5%85%A8%E6%8E%92%E5%88%97%E4%B8%8EN%E7%9A%87%E5%90%8E/"/>
    <url>/2021/08/06/%E5%85%A8%E6%8E%92%E5%88%97%E4%B8%8EN%E7%9A%87%E5%90%8E/</url>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode-cn.com/problems/permutations/">46. 全排列 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p><a href="https://leetcode-cn.com/problems/n-queens/submissions/">51. N 皇后 - 力扣（LeetCode） (leetcode-cn.com)</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>参考博文：</p><p><a href="https://labuladong.gitbook.io/algo/mu-lu-ye-3/mu-lu-ye/hui-su-suan-fa-xiang-jie-xiu-ding-ban">回溯算法解题套路框架 - labuladong的算法小抄 (gitbook.io)</a></p><p><a href="https://leetcode-cn.com/problems/n-queens/solution/dai-ma-sui-xiang-lu-51-n-queenshui-su-fa-2k32/">「代码随想录」带你学透回溯算法！51. N-Queens - N 皇后 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>回溯算法的框架：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">result</span> = []<br>def backtrack(路径, 选择列表):<br>    <span class="hljs-keyword">if</span> 满足结束条件:<br>        <span class="hljs-built_in">result</span>.<span class="hljs-built_in">add</span>(路径)<br>        <span class="hljs-literal">return</span><br><br>    <span class="hljs-keyword">for</span> 选择 <span class="hljs-keyword">in</span> 选择列表:<br>        做选择<br>        backtrack(路径, 选择列表)<br>        撤销选择<br></code></pre></td></tr></table></figure><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210806185936.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="hljs-keyword">int</span>[] nums) &#123;<br>        LinkedList&lt;Integer&gt; track = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        backtrack(nums, track);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-comment">// nums 选择列表 track 路径 </span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, LinkedList&lt;Integer&gt; track)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(track.size() == nums.length) &#123;<br>            <span class="hljs-comment">// 不能写成res.add(track);否则结果为空</span><br>            <span class="hljs-comment">// Java值传递 复制的是变量的地址 实际指向同一块内存地址</span><br>            <span class="hljs-comment">// 在这里new一块新的内存空间存数据</span><br>            res.add(<span class="hljs-keyword">new</span> LinkedList(track));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(track.contains(nums[i])) <span class="hljs-keyword">continue</span>;<br>            track.add(nums[i]);<br>            <span class="hljs-comment">// 进入下一层 直到遍历完nums数组</span><br>            backtrack(nums, track);<br>            <span class="hljs-comment">// track.size() == nums.length条件成立</span><br>            <span class="hljs-comment">// return后移除最后一个 返回上一层</span><br>            track.removeLast();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="N皇后"><a href="#N皇后" class="headerlink" title="N皇后"></a>N皇后</h3><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210806190106.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    List&lt;List&lt;String&gt;&gt; res = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="hljs-keyword">int</span> n) &#123;<br>        <span class="hljs-comment">// 初始化棋盘</span><br>        <span class="hljs-keyword">char</span>[][] board = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[n][n];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span>[] c : board) &#123;<br>            <span class="hljs-comment">// 快速初始化 填充一个数组</span><br>            Arrays.fill(c, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        &#125;<br>        backtrack(n, <span class="hljs-number">0</span>, board);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> row, <span class="hljs-keyword">char</span>[][] board)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(row == n) &#123;<br>            res.add(Array2List(board));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 想象一棵树 只不过节点是棋盘 每一层代表棋盘的一行row</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> col = <span class="hljs-number">0</span>; col &lt; n; col++) &#123;<br>            <span class="hljs-comment">// 排除不合法情况</span><br>            <span class="hljs-keyword">if</span> (!isValid(row, col, n, board)) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-comment">// 处理节点</span><br>            board[row][col] = <span class="hljs-string">&#x27;Q&#x27;</span>;<br>            <span class="hljs-comment">// 进入下一层</span><br>            backtrack(n, row+<span class="hljs-number">1</span>, board);<br>            <span class="hljs-comment">// 回溯 撤销处理结果</span><br>            <span class="hljs-comment">// row == n满足条件 结果已保存 退回上一层</span><br>            board[row][col] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List <span class="hljs-title">Array2List</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board)</span> </span>&#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span>[] c : board) &#123;<br>            list.add(String.copyValueOf(c));<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">// 剪枝</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(<span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> col, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">char</span>[][] board)</span> </span>&#123;<br>        <span class="hljs-comment">// 列</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span>(board[i][col] == <span class="hljs-string">&#x27;Q&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 左上</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = row - <span class="hljs-number">1</span>, j = col - <span class="hljs-number">1</span>; i &gt;=<span class="hljs-number">0</span> &amp;&amp; j&gt;= <span class="hljs-number">0</span>; i--, j--) &#123;<br>            <span class="hljs-keyword">if</span>(board[i][j] == <span class="hljs-string">&#x27;Q&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 右上</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = row - <span class="hljs-number">1</span>, j = col + <span class="hljs-number">1</span>; i &gt;=<span class="hljs-number">0</span> &amp;&amp; j&lt; n; i--, j++) &#123;<br>            <span class="hljs-keyword">if</span>(board[i][j] == <span class="hljs-string">&#x27;Q&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决：org.apache.ibatis.binding.BindingException</title>
    <link href="/2021/08/02/Parameter/"/>
    <url>/2021/08/02/Parameter/</url>
    
    <content type="html"><![CDATA[<h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><p><code>org.apache.ibatis.binding.BindingException: Parameter &#39;courseId&#39; not found.</code></p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>Mybatis传递参数是按<strong>位置</strong>传递的，如果想要按<strong>值</strong>传递，需要加 <code>@Param</code> 注解</p><ul><li>参数通过<code>@Param</code>内的字段名称注入到sql语句对应位置</li></ul><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210802162655.png"></p>]]></content>
    
    
    <categories>
      
      <category>MyBatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>实现：双层锁防止Redis缓存击穿</title>
    <link href="/2021/08/02/%E5%8F%8C%E5%B1%82%E9%94%81%E9%98%B2%E6%AD%A2Redis%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/"/>
    <url>/2021/08/02/%E5%8F%8C%E5%B1%82%E9%94%81%E9%98%B2%E6%AD%A2Redis%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/</url>
    
    <content type="html"><![CDATA[<h3 id="假设情景"><a href="#假设情景" class="headerlink" title="假设情景"></a>假设情景</h3><p>高并发下，若干人同时进入<code>getAllCourse</code>方法查询课程信息，若在缓存中没找到结果，则这些人将同时访问数据库，Redis做缓存失去了应有的作用。</p><h4 id="模拟20个线程高并发"><a href="#模拟20个线程高并发" class="headerlink" title="模拟20个线程高并发"></a>模拟20个线程高并发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getAllCourse&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Course&gt; <span class="hljs-title">getAllCourse</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 模拟多线程：创建一个容量20个的线程池</span><br>    ExecutorService es = Executors.newFixedThreadPool(<span class="hljs-number">20</span>);<br>    <span class="hljs-comment">// 模拟20个线程同时查询</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br>        es.submit(<span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                courseService.getAllCourse();<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">return</span> courseService.getAllCourse();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="双层检测锁-DCL：double-check-lock"><a href="#双层检测锁-DCL：double-check-lock" class="headerlink" title="双层检测锁 DCL：double check lock"></a>双层检测锁 DCL：double check lock</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CourseServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CourseService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CourseMapper courseMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;Object,Object&gt; redisTemplate;<br>    <br>    <span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Course&gt; <span class="hljs-title">getAllCourse</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//将redis内存中的序列化的集合名称用String重新命名（增加可读性）</span><br>    RedisSerializer rs = <span class="hljs-keyword">new</span> StringRedisSerializer();<br>    redisTemplate.setKeySerializer(rs);<br><br>    System.out.println(<span class="hljs-string">&quot;***查询redis***&quot;</span>);<br>    List&lt;Course&gt; list = (List&lt;Course&gt;)redisTemplate.opsForValue().get(<span class="hljs-string">&quot;allCourses&quot;</span>);<br>    <span class="hljs-keyword">if</span>(list == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-comment">//排队，让第一个人进，走一遍流程（后面的人就会走缓存了）</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>)&#123;<br>            list = (List&lt;Course&gt;)redisTemplate.opsForValue().get(<span class="hljs-string">&quot;allCourses&quot;</span>);<br>            <span class="hljs-keyword">if</span>(list == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">//去数据库</span><br>                System.out.println(<span class="hljs-string">&quot;===MySql数据库===&quot;</span>);<br>                list = courseMapper.getAllCourse();<br>                <span class="hljs-comment">// 把从数据库查询的集合放在redis内存中(key,value,过期时间,分钟为单位)</span><br>                redisTemplate.opsForValue().set(<span class="hljs-string">&quot;allCourses&quot;</span>, list,<span class="hljs-number">10</span>, TimeUnit.MINUTES);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="如何保证Redis中数据是最新的"><a href="#如何保证Redis中数据是最新的" class="headerlink" title="如何保证Redis中数据是最新的"></a>如何保证Redis中数据是最新的</h4><ol><li>先将Redis中的相关集合删除</li><li>将最新的数据保存到数据库</li><li>查询数据时，因为Redis中的数据已经删除了，所以会第一时间去数据库查询</li></ol>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>项目调试常用命令</title>
    <link href="/2021/08/02/%E9%A1%B9%E7%9B%AE%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/08/02/%E9%A1%B9%E7%9B%AE%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">systemctl stop firewalld<br></code></pre></td></tr></table></figure><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> 进程名称<br></code></pre></td></tr></table></figure><h3 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h3><p>查看所有</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -lntp</span><br></code></pre></td></tr></table></figure><p>查看指定</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">netstat -lntp <span class="hljs-string">| grep 端口号</span><br></code></pre></td></tr></table></figure><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>以配置文件的方式启动</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>redis-server <span class="hljs-regexp">/opt/</span>redis-<span class="hljs-number">5.0</span>.<span class="hljs-number">4</span>/redis.conf<br></code></pre></td></tr></table></figure><h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><p>单实例关闭</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">redis-cli shutdown<br></code></pre></td></tr></table></figure><p>多实例关闭</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">redis</span>-cli -p <span class="hljs-number">6379</span> shutdown<br></code></pre></td></tr></table></figure><h4 id="连接并测试"><a href="#连接并测试" class="headerlink" title="连接并测试"></a>连接并测试</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">redis-<span class="hljs-keyword">cli</span><br><span class="hljs-built_in">ping</span><br></code></pre></td></tr></table></figure><h3 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a>FastDFS</h3><h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/fdfs_trackerd /</span>etc<span class="hljs-regexp">/fdfs/</span>tracker.conf restart<br><span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/fdfs_storaged /</span>etc<span class="hljs-regexp">/fdfs/</span>storage.conf restart<br></code></pre></td></tr></table></figure><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><h4 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h4><p>启动代码格式：nginx安装目录地址 -c nginx配置文件地址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<span class="hljs-regexp">/nginx -c /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/conf/</span>nginx.conf<br></code></pre></td></tr></table></figure><h4 id="关闭-1"><a href="#关闭-1" class="headerlink" title="关闭"></a>关闭</h4><p>从容关闭</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> nginxkill -QUIT 进程号<br></code></pre></td></tr></table></figure><p>强制关闭</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pkill</span> -<span class="hljs-number">9</span> nginx<br></code></pre></td></tr></table></figure><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">start</span> rabbitmq-<span class="hljs-keyword">server</span>.service<br></code></pre></td></tr></table></figure><p>浏览器输入：<a href="http://192.168.xx:xxx:15672">http://192.168.xx:xxx:15672</a></p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><h4 id="启动-3"><a href="#启动-3" class="headerlink" title="启动"></a>启动</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> docker<br></code></pre></td></tr></table></figure><h4 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>docker.service<br></code></pre></td></tr></table></figure><blockquote><p>ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</p></blockquote><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210801222435.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl daemon-reload # 重新加载配置文件<br>service docker restart # 重启<br>dockernetstat -nlpt # 查看端口<br>curl http://192.168.xx.xxx:2375/version # 测试<br></code></pre></td></tr></table></figure><h4 id="IDEA镜像加速器"><a href="#IDEA镜像加速器" class="headerlink" title="IDEA镜像加速器"></a>IDEA镜像加速器</h4><blockquote><p><a href="https://owi3yzzk.mirror.aliyuncs.com/">https://owi3yzzk.mirror.aliyuncs.com</a></p></blockquote><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/d4.png"></p><h4 id="Docker的Maven插件"><a href="#Docker的Maven插件" class="headerlink" title="Docker的Maven插件"></a>Docker的Maven插件</h4><p><code>docker-maven-plugin</code>，自动生成镜像并推送到仓库中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.spotify<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>docker-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--镜像名称 robin/test-docker-demo--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">imageName</span>&gt;</span>robin/$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">imageName</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--标签版本--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">imageTags</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">imageTag</span>&gt;</span>latest<span class="hljs-tag">&lt;/<span class="hljs-name">imageTag</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">imageTags</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--基础镜像，相当于Dockerfile里的from--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">baseImage</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">baseImage</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--签名（作者）--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maintainer</span>&gt;</span>robin robin_liu_work@163.com<span class="hljs-tag">&lt;/<span class="hljs-name">maintainer</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--入口点，project.build.finalName就是project标签下的build标签下的filename标签内容 test-docker-demo--&gt;</span><br>        <span class="hljs-comment">&lt;!--相当于启动容器后，会自动执行java -jar/test-docker-demo.jar--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entryPoint</span>&gt;</span>[&quot;java&quot;, &quot;-jar&quot;, &quot;/$&#123;project.build.finalName&#125;.jar&quot;]<span class="hljs-tag">&lt;/<span class="hljs-name">entryPoint</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--docker地址--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dockerHost</span>&gt;</span>http://192.168.11.128:2375<span class="hljs-tag">&lt;/<span class="hljs-name">dockerHost</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 这里是复制 jar 包到 docker 容器指定目录配置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--复制的根目录，target--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--把哪个文件上传到docker 相当于Dockerfile里的add test-docker-demo.jar /--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p>进入项目根目录</p><p><strong>注意</strong>：除eureka外，其他项目配置文件中<code>eureka client</code>地址要改为虚拟机ip(Docker服务器的ip)</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210802102754.png"></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">mvn clean <span class="hljs-keyword">package</span> <span class="hljs-title">docker:build</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210801231818.png"></p><p>报错</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210801231439.png"></p><p>修改<code>maven-resources-plugin</code>的版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210801231600.png"></p><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210801232145.png"></p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210801233048.png"></p><p>报错</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210801232922.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>libexec<span class="hljs-regexp">/docker/</span><br>ln -s docker-proxy-current docker-proxy<br></code></pre></td></tr></table></figure><p>端口重复分配</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210801233311.png"></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service docker restart</span><br></code></pre></td></tr></table></figure><p>再次报错</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210801233447.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>libexec<span class="hljs-regexp">/docker/</span><br>ln -s docker-runc-current docker-runc<br></code></pre></td></tr></table></figure><p>成功</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/image-20210801233611477.png"></p><p>查看正在运行的容器</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker ps</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>实现：Element UI 上传一张图片后隐藏上传按钮</title>
    <link href="/2021/08/01/Element%20UI%20%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%89%87%E5%90%8E%E9%9A%90%E8%97%8F%E4%B8%8A%E4%BC%A0%E6%8C%89%E9%92%AE%E5%8A%9F%E8%83%BD/"/>
    <url>/2021/08/01/Element%20UI%20%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%89%87%E5%90%8E%E9%9A%90%E8%97%8F%E4%B8%8A%E4%BC%A0%E6%8C%89%E9%92%AE%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><p><a href="https://blog.csdn.net/MYuanFang/article/details/106059423">Element UI 实现上传单个图片功能</a></p><p><a href="https://cn.vuejs.org/v2/guide/class-and-style.html">Class 与 Style 绑定</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h2 style=&quot;margin-bottom:10px&quot;&gt;上传单个图片&lt;/h2&gt;<br>    &lt;el-upload<br>        class=&quot;avatar-uploader&quot;<br>        action=&quot;https://jsonplaceholder.typicode.com/posts/&quot;<br>        list-type=&quot;picture-card&quot;<br>        :on-preview=&quot;handlePictureCardPreview&quot;<br>        :on-remove=&quot;handleRemove&quot;<br>        :http-request=&quot;httpRequest&quot;<br>        :class=&quot;&#123;&#x27;demo-httpRequestImg&#x27;:httpRequestImg&#125;&quot; &lt;!--绑定一个占位class--&gt;<br>        &gt;<br>        &lt;i class=&quot;el-icon-plus&quot;&gt;&lt;/i&gt;<br>    &lt;/el-upload&gt;<br>    &lt;el-dialog :visible.sync=&quot;dialogVisibleImg&quot; append-to-body class=&quot;ImgClass&quot;&gt;<br>        &lt;img width=&quot;100%&quot; :src=&quot;dialogImageUrl&quot; alt=&quot;&quot;&gt;<br>    &lt;/el-dialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br> <br>&lt;script&gt;<br>export default &#123;<br>  data()&#123;<br>    return&#123;<br>      dialogImageUrl: &#x27;&#x27;,//预览url<br>      dialogVisibleImg:false,<br>      httpRequestImg:false, // 展示upload图片<br>    &#125;<br>  &#125;,<br>  methods:&#123;<br>    httpRequest(a) &#123; //上传成功<br>      // 正常情况下会出现第二个图片框 true =&gt; display: none;<br>      this.httpRequestImg = true;<br>    &#125;,<br>    handlePictureCardPreview(file) &#123; //预览<br>      this.dialogImageUrl = file.url;<br>      this.dialogVisibleImg = true;<br>    &#125;,<br>    handleRemove(file, fileList) &#123; //删除<br>      this.httpRequestImg = false; // 展示upload图片<br>      console.log(file, fileList);<br>    &#125;,<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br> <br>&lt;style lang=&quot;less&quot; scoped&gt;<br>  .demo-httpRequestImg&#123;<br>    /deep/ .el-upload--picture-card&#123;<br>        display: none; // 重点在style里<br>    &#125;<br>  &#125; <br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210801020753.png" alt="改造前"></p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210801023945.png" alt="改造后"></p>]]></content>
    
    
    <categories>
      
      <category>Vue.js &amp; Element UI</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决：URL访问不到FastDFS图片</title>
    <link href="/2021/07/30/URL%E8%AE%BF%E9%97%AE%E4%B8%8D%E5%88%B0FastDFS%E5%9B%BE%E7%89%87/"/>
    <url>/2021/07/30/URL%E8%AE%BF%E9%97%AE%E4%B8%8D%E5%88%B0FastDFS%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>在Linux系统中安装好Nginx和FastDFS</p><p>教程：<a href="https://blog.csdn.net/lovely__rr/article/details/109569124?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.pc_relevant_baidujshouduan&spm=1001.2101.3001.4242">整合FastDFS与Nginx 使生成的文件URL能够通过浏览器访问</a></p><h3 id="出错原因"><a href="#出错原因" class="headerlink" title="出错原因"></a>出错原因</h3><p>server中server_name和location没配好，原因是以前配过Nginx集群，修改时没注意细节</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210730234436.png" alt="网图 用来说明"></p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/image-20210730235223839.png"></p><h3 id="解决成功"><a href="#解决成功" class="headerlink" title="解决成功"></a>解决成功</h3><p>下图是调整好的</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210730231613.png"></p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/20210730234833.png"></p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode TOP 145：5 longest-palindromic-substring</title>
    <link href="/2021/07/24/5%20longest-palindromic-substring/"/>
    <url>/2021/07/24/5%20longest-palindromic-substring/</url>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">5. 最长回文子串 - 力扣（LeetCode） (leetcode-cn.com)</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-comment">// 动态规划</span><br>        <span class="hljs-comment">// 初始状态: l=r 时 dp[l][r]=true</span><br>        <span class="hljs-comment">// 状态转移方程: dp[l][r]=true &amp;&amp; dp[l+1][r-1]=true</span><br><br>        <span class="hljs-comment">// base case</span><br>        <span class="hljs-keyword">if</span>(s == <span class="hljs-keyword">null</span> || s.length() &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> s;<br><br>        <span class="hljs-keyword">int</span> strLen = s.length();<br>        <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> end = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> maxLen = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">boolean</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[strLen][strLen];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> right = <span class="hljs-number">1</span>; right &lt; strLen; right++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>; left &lt; right; left++) &#123;<br>                <span class="hljs-comment">// 最小情况：right - left &lt;= 2 相邻的2或3个字符组成的回文 bb或bab 考虑了奇偶</span><br>                <span class="hljs-comment">// 避免越界：dp[left + 1][right - 1]</span><br>                <span class="hljs-keyword">if</span>(s.charAt(left) == s.charAt(right) &amp;&amp; (right - left &lt;= <span class="hljs-number">2</span> || dp[left + <span class="hljs-number">1</span>][right - <span class="hljs-number">1</span>])) &#123;<br>                    dp[left][right] = <span class="hljs-keyword">true</span>;<br>                    <span class="hljs-comment">// 更新结果 向两边延展</span><br>                    <span class="hljs-keyword">if</span>((right - left + <span class="hljs-number">1</span>) &gt; maxLen) &#123;<br>                        maxLen = right - left + <span class="hljs-number">1</span>;<br>                        start = left;<br>                        end = right;<br>                    &#125;     <br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s.substring(start, end + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度：O(n^2)， n 是字符串的长度。</p><p>空间复杂度：O(n^2)，存储动态规划状态（在双重for循环内部）。</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode TOP 145：4 median-of-two-sorted-arrays</title>
    <link href="/2021/07/24/4%20median-of-two-sorted-arrays/"/>
    <url>/2021/07/24/4%20median-of-two-sorted-arrays/</url>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">4. 寻找两个正序数组的中位数 - 力扣（LeetCode） (leetcode-cn.com)</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>时间复杂度要求O(log(m+n))，只能考虑二分搜索</p><ul><li>题目是求中位数，其实就是求第 <code>k</code> 小数的一种特殊情况</li><li>我们可以每次循环排除掉 <code>k/2</code> 个数</li><li>递归出口就是当 <code>k=1</code> 或者其中一个数组长度是 <code>0</code> 了</li><li>每进行一次循环，我们就减少 <code>k/2</code> 个元素，所以时间复杂度是 <code>O(log(k))</code>，而 <code>k=(m+n)/2</code>，所以最终的复杂度是<code>O(log(m+n))</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums1, <span class="hljs-keyword">int</span>[] nums2)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums1.length;<br>    <span class="hljs-keyword">int</span> m = nums2.length;<br>    <span class="hljs-comment">// 简化代码 不分奇偶讨论</span><br>    <span class="hljs-keyword">int</span> left = (n + m + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> right = (n + m + <span class="hljs-number">2</span>) / <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// 将偶数和奇数的情况合并 如果是奇数 会求两次同样的 k（最后除以2即为最后的中位数）</span><br>    <span class="hljs-keyword">return</span> (getKth(nums1, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, nums2, <span class="hljs-number">0</span>, m - <span class="hljs-number">1</span>, left) + getKth(nums1, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, nums2, <span class="hljs-number">0</span>, m - <span class="hljs-number">1</span>, right)) * <span class="hljs-number">0.5</span>;  <span class="hljs-comment">// * 0.5保证double</span><br>&#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getKth</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums1, <span class="hljs-keyword">int</span> start1, <span class="hljs-keyword">int</span> end1, <span class="hljs-keyword">int</span>[] nums2, <span class="hljs-keyword">int</span> start2, <span class="hljs-keyword">int</span> end2, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-comment">// 长度比下标多1</span><br>        <span class="hljs-keyword">int</span> len1 = end1 - start1 + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> len2 = end2 - start2 + <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 让len1的长度小于len2 保证如果有数组空了 一定是len1 </span><br>        <span class="hljs-keyword">if</span> (len1 &gt; len2) <span class="hljs-keyword">return</span> getKth(nums2, start2, end2, nums1, start1, end1, k);<br>        <span class="hljs-comment">// 如果一个数组中空了 返回另一个数组第k个数 </span><br>        <span class="hljs-keyword">if</span> (len1 == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> nums2[start2 + k - <span class="hljs-number">1</span>]; <span class="hljs-comment">// 下标记得-1</span><br><br>        <span class="hljs-comment">// 第一(k==1)个数是中位数 谁的值小 中位数就是谁</span><br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> Math.min(nums1[start1], nums2[start2]);<br><br>        <span class="hljs-comment">// 防止数组下标越界（数组长度小于k/2） 每次都会从当前数组所生长度和k/2作比较 取小的</span><br>        <span class="hljs-comment">// 如果数组长度小于k/2 则下一次遍历会到末尾 后续在剩余的数组中寻找中位数</span><br>        <span class="hljs-keyword">int</span> i = start1 + Math.min(len1, k / <span class="hljs-number">2</span>) - <span class="hljs-number">1</span>; <span class="hljs-comment">// 下标记得-1</span><br>        <span class="hljs-keyword">int</span> j = start2 + Math.min(len2, k / <span class="hljs-number">2</span>) - <span class="hljs-number">1</span>; <span class="hljs-comment">// 下标记得-1</span><br><br>        <span class="hljs-keyword">if</span> (nums1[i] &gt; nums2[j]) &#123;<br>            <span class="hljs-comment">// nums2从j + 1开始 前k/2-1个值丢弃 更新k值</span><br>            <span class="hljs-keyword">return</span> getKth(nums1, start1, end1, nums2, j + <span class="hljs-number">1</span>, end2, k - (j - start2 + <span class="hljs-number">1</span>));<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// nums2从i + 1开始 前k/2-1个值丢弃 更新k值</span><br>            <span class="hljs-keyword">return</span> getKth(nums1, i + <span class="hljs-number">1</span>, end1, nums2, start2, end2, k - (i - start1 + <span class="hljs-number">1</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度：O(log(m+n))</p><p>空间复杂度：尾递归，O(1)</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode TOP 145：3 longest-substring-without-repeating-characters</title>
    <link href="/2021/07/22/3%20longest-substring-without-repeating-characters/"/>
    <url>/2021/07/22/3%20longest-substring-without-repeating-characters/</url>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串 - 力扣（LeetCode） (leetcode-cn.com)</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-comment">// 滑动窗口</span><br>        Map&lt;Character, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-comment">// map中存过该值</span><br>            <span class="hljs-keyword">if</span>(map.containsKey(s.charAt(i))) &#123;<br>                <span class="hljs-comment">// 左指针右滑</span><br>                left = Math.max(left, map.get(s.charAt(i)) + <span class="hljs-number">1</span>);                <br>            &#125;<br>            <span class="hljs-comment">// 未存过</span><br>            map.put(s.charAt(i), i);<br>            <span class="hljs-comment">// 更新结果</span><br>            res = Math.max(res, i - left + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度：O(N)，N 是字符串的长度。</p><p>空间复杂度：<em>O</em>(∣Σ∣)，最大可存ASCII 码在 [0, 128)内的字符，即 ∣Σ∣ = 128。</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode TOP 145：2 add-two-numbers</title>
    <link href="/2021/07/17/2%20add-two-numbers/"/>
    <url>/2021/07/17/2%20add-two-numbers/</url>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode-cn.com/problems/add-two-numbers/">2. 两数相加 - 力扣（LeetCode） (leetcode-cn.com)</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;<br>        ListNode head = <span class="hljs-keyword">null</span>, tail = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// tail相当于游标</span><br>        <span class="hljs-keyword">int</span> carry = <span class="hljs-number">0</span>; <span class="hljs-comment">// 初始进位位</span><br>        <span class="hljs-keyword">while</span>(l1 != <span class="hljs-keyword">null</span> || l2 != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">int</span> n1 = l1 != <span class="hljs-keyword">null</span> ? l1.val : <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> n2 = l2 != <span class="hljs-keyword">null</span> ? l2.val : <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">// 对应位置相加 别忘了进位</span><br>            <span class="hljs-keyword">int</span> sum = n1 + n2 + carry;<br>            carry = sum / <span class="hljs-number">10</span>;<br><br>            <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 头节点</span><br>                head = tail = <span class="hljs-keyword">new</span> ListNode(sum % <span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tail.next = <span class="hljs-keyword">new</span> ListNode(sum % <span class="hljs-number">10</span>); <span class="hljs-comment">// 结果链表向后延伸</span><br>                tail = tail.next; <span class="hljs-comment">// 游标向后移动</span><br>            &#125;                <br><br>            <span class="hljs-comment">// 输入链表向后移动</span><br>            <span class="hljs-keyword">if</span>(l1 != <span class="hljs-keyword">null</span>) l1 = l1.next; <br>            <span class="hljs-keyword">if</span>(l2 != <span class="hljs-keyword">null</span>) l2 = l2.next;<br>        &#125;<br><br>        <span class="hljs-comment">// l1 l2均为空 相加完毕</span><br>        <span class="hljs-keyword">if</span>(carry &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 最后的进位落下</span><br>            tail.next = <span class="hljs-keyword">new</span> ListNode(carry);<br><br>        <span class="hljs-keyword">return</span> head; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度：O(max(m,n))（线性增长），m 和 n 分别为两个链表的长度。</p><p>空间复杂度：O(1)，每次使用一个节点的空间，注意返回值不计入空间复杂度。</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode TOP 145：1 two-sum</title>
    <link href="/2021/07/17/1%20two-sum/"/>
    <url>/2021/07/17/1%20two-sum/</url>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和 - 力扣（LeetCode） (leetcode-cn.com)</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-comment">// 有下标有元素值 想到哈希表</span><br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(nums[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>); <span class="hljs-comment">// 放入数组第一个值 及其下标</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">int</span> res = target - nums[i]; <span class="hljs-comment">// target减去当前数组的值所得的数 若存在于map中 则构成一组结果</span><br>            <span class="hljs-keyword">if</span>(map.containsKey(res)) <br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;i, map.get(res)&#125;; <span class="hljs-comment">// 返回一组下标</span><br>            <span class="hljs-keyword">else</span>  <br>                map.put(nums[i], i); <span class="hljs-comment">// 未存储过 存入   </span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 没有符合条件的结果</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度：O(N)，N 是数组中的元素数量。</p><p>空间复杂度：O(N)，N 是数组中的元素数量，主要为哈希表的开销。</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决：gitee添加SSH公钥 指纹生成失败</title>
    <link href="/2021/07/16/gitee%E6%8C%87%E7%BA%B9%E7%94%9F%E6%88%90%E5%A4%B1%E8%B4%A5/"/>
    <url>/2021/07/16/gitee%E6%8C%87%E7%BA%B9%E7%94%9F%E6%88%90%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>已生成id_rsa.pub文件，且github配置ssh公钥成功</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>gitee添加ssh公钥，输完密码后弹出：指纹生成失败</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/image-20210716141949630.png"></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>我去看了.ssh文件夹</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/image-20210716142048988.png"></p><p>发现known_hosts里面已经有了gitee.com</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/image-20210716142113728.png"></p><p>于是我把它删除了，然后再次添加，显示成功</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/image-20210716142218033.png"></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决：启动CentOS7图形界面报错</title>
    <link href="/2021/07/14/%E5%90%AF%E5%8A%A8CentOS7%20A%20problem%20has%20occurred%20and%20the%20system%20can&#39;t%20recover%20Please%20contact%20a%20system%20administrator/"/>
    <url>/2021/07/14/%E5%90%AF%E5%8A%A8CentOS7%20A%20problem%20has%20occurred%20and%20the%20system%20can&#39;t%20recover%20Please%20contact%20a%20system%20administrator/</url>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>Windows 10 家庭中文版</p><p>VMware-workstation-full-15.0.2-10952284.exe</p><p>CentOS-7-x86_64-DVD-1503-01</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>安装完后出现如下画面：</p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/image-20210707135940197.png"></p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><h4 id="1-上网搜索，据说是图形界面崩溃，需要执行如下操作："><a href="#1-上网搜索，据说是图形界面崩溃，需要执行如下操作：" class="headerlink" title="1. 上网搜索，据说是图形界面崩溃，需要执行如下操作："></a>1. 上网搜索，据说是图形界面崩溃，需要执行如下操作：</h4><h5 id="1-1-ctrl-alt-f2进入命令行"><a href="#1-1-ctrl-alt-f2进入命令行" class="headerlink" title="1.1 ctrl + alt + f2进入命令行"></a>1.1 <code>ctrl + alt + f2</code>进入命令行</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum history package-list gjs<br>sudo yum history package-list gnome-shell<br>sudo yum update --skip-broken<br></code></pre></td></tr></table></figure><h5 id="1-2-执行第三句后报错：Cannot-find-a-valid-baseurl-for-repo-base-7-x86-64"><a href="#1-2-执行第三句后报错：Cannot-find-a-valid-baseurl-for-repo-base-7-x86-64" class="headerlink" title="1.2 执行第三句后报错：Cannot find a valid baseurl for repo: base/7/x86_64"></a>1.2 执行第三句后报错：Cannot find a valid baseurl for repo: base/7/x86_64</h5><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/image-20210707154454894.png"></p><h6 id="1-2-1-修改配置文件ifcfg-eno16777736"><a href="#1-2-1-修改配置文件ifcfg-eno16777736" class="headerlink" title="1.2.1 修改配置文件ifcfg-eno16777736"></a>1.2.1 修改配置文件<code>ifcfg-eno16777736</code></h6><p>进入<code>/etc/sysconfig/network-scripts</code>目录，查找<code>ifcfg</code>开头的文件，将配置<code>ONBOOT=no</code>，改为<code>ONBOOT=yes</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/sysconfig/network-scripts<br>ls<br><span class="hljs-meta">#</span><span class="bash"> 我的centos7 有ifcfg-eno16777736  ifcfg-lo两个文件 修改ifcfg-eno16777736文件中的配置即可</span><br>vi ifcfg-eno16777736<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/image-20210707140945428.png"></p><h6 id="1-2-2-重启网络"><a href="#1-2-2-重启网络" class="headerlink" title="1.2.2 重启网络"></a>1.2.2 重启网络</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service network restart<br></code></pre></td></tr></table></figure><h5 id="1-3-重新执行第三句"><a href="#1-3-重新执行第三句" class="headerlink" title="1.3 重新执行第三句"></a>1.3 重新执行第三句</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum update --skip-broken<br></code></pre></td></tr></table></figure><p>进入漫长的下载过程，期间会有询问，都输入 <code>y</code></p><h4 id="2-重启CentOS7"><a href="#2-重启CentOS7" class="headerlink" title="2. 重启CentOS7"></a>2. 重启CentOS7</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo shutdown -r now<br></code></pre></td></tr></table></figure><h4 id="3-问题解决"><a href="#3-问题解决" class="headerlink" title="3. 问题解决"></a>3. 问题解决</h4><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/image-20210707160449424.png"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决：16GRAM + Windows10家庭版启动CentOS7蓝屏</title>
    <link href="/2021/07/14/16GRAM%20+%20Windows10%E5%AE%B6%E5%BA%AD%E7%89%88%E5%90%AF%E5%8A%A8CentOS7%E8%93%9D%E5%B1%8F/"/>
    <url>/2021/07/14/16GRAM%20+%20Windows10%E5%AE%B6%E5%BA%AD%E7%89%88%E5%90%AF%E5%8A%A8CentOS7%E8%93%9D%E5%B1%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>16GRAM是想说，肯定不是内存不够的问题。</p><p>Windows10家庭版是想说，一些解决方法里提到的关闭Hyper-V、关闭Device/Credenti，家庭版没有这两个选项。</p><h3 id="我的解决方法"><a href="#我的解决方法" class="headerlink" title="我的解决方法"></a>我的解决方法</h3><h4 id="1-启动虚拟机平台"><a href="#1-启动虚拟机平台" class="headerlink" title="1. 启动虚拟机平台"></a>1. 启动虚拟机平台</h4><h5 id="1-1-启用或关闭Windows功能"><a href="#1-1-启用或关闭Windows功能" class="headerlink" title="1.1 启用或关闭Windows功能"></a>1.1 启用或关闭Windows功能</h5><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/image-20210708151151898.png"></p><h5 id="1-2-启动虚拟机平台"><a href="#1-2-启动虚拟机平台" class="headerlink" title="1.2 启动虚拟机平台"></a>1.2 启动虚拟机平台</h5><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/image-20210708151510674.png"></p><h5 id="1-3-重启电脑即可进入"><a href="#1-3-重启电脑即可进入" class="headerlink" title="1.3 重启电脑即可进入"></a>1.3 重启电脑即可进入</h5><h4 id="2-新蓝屏bug：在该系统上全局禁用了虚拟机打印功能，不会为该虚拟机启用此功能"><a href="#2-新蓝屏bug：在该系统上全局禁用了虚拟机打印功能，不会为该虚拟机启用此功能" class="headerlink" title="2. 新蓝屏bug：在该系统上全局禁用了虚拟机打印功能，不会为该虚拟机启用此功能"></a>2. 新蓝屏bug：在该系统上全局禁用了虚拟机打印功能，不会为该虚拟机启用此功能</h4><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/image-20210708152322820.png"></p><h5 id="2-1-开启打印功能"><a href="#2-1-开启打印功能" class="headerlink" title="2.1 开启打印功能"></a>2.1 开启打印功能</h5><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/image-20210708152100783.png"></p><p><img src="https://gitee.com/robin_p_liu/images_for_blog/raw/master/img/image-20210708152223001.png"></p><h5 id="2-2-重启虚拟机即可进入"><a href="#2-2-重启虚拟机即可进入" class="headerlink" title="2.2 重启虚拟机即可进入"></a>2.2 重启虚拟机即可进入</h5>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/07/11/hello-world/"/>
    <url>/2021/07/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
