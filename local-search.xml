<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>标记重复项 &amp;&amp; 重复项就近显示</title>
    <link href="/2022/04/15/%E6%A0%87%E8%AE%B0%E9%87%8D%E5%A4%8D%E9%A1%B9%20&amp;&amp;%20%E9%87%8D%E5%A4%8D%E9%A1%B9%E5%B0%B1%E8%BF%91%E6%98%BE%E7%A4%BA/"/>
    <url>/2022/04/15/%E6%A0%87%E8%AE%B0%E9%87%8D%E5%A4%8D%E9%A1%B9%20&amp;&amp;%20%E9%87%8D%E5%A4%8D%E9%A1%B9%E5%B0%B1%E8%BF%91%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>需求：发票抬头名称重复时，在发票抬头前显示“单位编号”进行区分，重复的发票抬头就近显示。</p></blockquote><h2 id="标记重复项"><a href="#标记重复项" class="headerlink" title="标记重复项"></a>标记重复项</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>遍历从后端拿出的发票抬头链表（映射到js就是数组），标记重复项<ul><li>手动写<code>map</code>记录发票抬头出现次数</li><li>次数&gt;1即为重复</li></ul></li><li>第二次遍历发票抬头数组，若该发票抬头在<code>map</code>中的值&gt;1，则添加“单位编号”前缀</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>过滤逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> titleMap = &#123;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; validTitles.length; i++) &#123;<br>    <span class="hljs-keyword">let</span> title = validTitles[i].enterpriseInvoiceTitle<br>    <span class="hljs-keyword">if</span> (!titleMap[title]) &#123;<br>        titleMap[title] = <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        titleMap[title] += <span class="hljs-number">1</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; validTitles.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (titleMap[validTitles[i].enterpriseInvoiceTitle] &gt; <span class="hljs-number">1</span>) &#123;<br>        validTitles[i].enterpriseInvoiceTitlePrefix = validTitles[i].enterpriseNo + <span class="hljs-string">&#x27;, &#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>界面展示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: left&quot;</span>&gt;</span>&#123;&#123; item.enterpriseInvoiceTitlePrefix &#125;&#125;&#123;&#123; item.enterpriseInvoiceTitle &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><code>enterpriseInvoiceTitle</code>代表发票抬头字段，不能在该字段内部加前缀：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">validTitles[i].enterpriseInvoiceTitle = validTitles[i].enterpriseNo + <span class="hljs-string">&#x27;, &#x27;</span> + validTitles[i].enterpriseInvoiceTitle<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: left&quot;</span>&gt;</span>&#123;&#123; item.enterpriseInvoiceTitle &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>that’s horrible! 这会引发其他方法的传参异常！</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/image-20220507111419903.png" alt="image-20220507111419903"></p><p><strong>谨慎修改原值</strong>，会引发连锁反应！应该新指定一个字段，然后在展示时拼接在原值前面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">validTitles[i].enterpriseInvoiceTitlePrefix = validTitles[i].enterpriseNo + <span class="hljs-string">&#x27;, &#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: left&quot;</span>&gt;</span>&#123;&#123; item.enterpriseInvoiceTitlePrefix &#125;&#125;&#123;&#123; item.enterpriseInvoiceTitle &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="重复项就近显示"><a href="#重复项就近显示" class="headerlink" title="重复项就近显示"></a>重复项就近显示</h2><p>本来我还为排序犯愁，没想到一行代码就解决了。很多时候不是不会，而是不知道还可以这么做，还是要多看前人代码呀！</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//for (let i = 0; i &lt; validTitles.length; i++) &#123;</span><br><span class="hljs-comment">//    if (titleMap[validTitles[i].enterpriseInvoiceTitle] &gt; 1) &#123;</span><br><span class="hljs-comment">//        validTitles[i].enterpriseInvoiceTitlePrefix = validTitles[i].enterpriseNo + &#x27;, &#x27;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//&#125;</span><br><br>validTitles.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a.enterpriseInvoiceTitle.localeCompare(b.enterpriseInvoiceTitle))<br></code></pre></td></tr></table></figure><p><code>localeCompare()</code>返回一个数字，然后<code>sort()</code>按照数字升序排序。</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">localeCompare()</a> 返回一个数字来指示一个参考字符串是否在排序顺序前面或之后，或与给定字符串相同。</p><ul><li><code>referenceStr.localeCompare(compareString)</code></li><li>如果引用字符存在于比较字符之前则为<strong>负数</strong>；如果引用字符存在于比较字符之后则为<strong>正数</strong>；相等的时候返回 <strong>0</strong> </li></ul></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">sort()</a> 是原地算法，会改变原始数组，默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的。</p></li></ul><h4 id="测试排序过程"><a href="#测试排序过程" class="headerlink" title="测试排序过程"></a>测试排序过程</h4><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/image-20220507124803020.png" alt="image-20220507124803020"></p>]]></content>
    
    
    <categories>
      
      <category>FrontEnd</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>工具 &amp;&amp; 它们的格式化 || 快捷键</title>
    <link href="/2022/02/17/%E5%B7%A5%E5%85%B7%20%E6%A0%BC%E5%BC%8F%E5%8C%96&amp;%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2022/02/17/%E5%B7%A5%E5%85%B7%20%E6%A0%BC%E5%BC%8F%E5%8C%96&amp;%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h2><h3 id="格式化json"><a href="#格式化json" class="headerlink" title="格式化json"></a>格式化json</h3><p>打开 Sublime，<code>command + shift + p</code> -&gt; Install package -&gt; Pretty JSON</p><p>Mac：<code>command + ctrl + j</code><br>Windows：<code>ctrl + alt + j</code></p><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><h3 id="创建新文件时自动生成自定义名字和时间"><a href="#创建新文件时自动生成自定义名字和时间" class="headerlink" title="创建新文件时自动生成自定义名字和时间"></a>创建新文件时自动生成自定义名字和时间</h3><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/898586B8-5C3F-418A-BAC5-1E4A3E743670.png"></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">/**<br> *<br> * <span class="hljs-variable">@author</span> pliu<br> * <span class="hljs-variable">@date</span> <span class="hljs-variable">$&#123;</span>YEAR&#125;-<span class="hljs-variable">$&#123;</span>MONTH&#125;-<span class="hljs-variable">$&#123;</span>DAY&#125; <span class="hljs-variable">$&#123;</span>HOUR&#125;<span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span>MINUTE&#125;<br> *<span class="hljs-regexp">/</span><br></code></pre></td></tr></table></figure><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>Mac快捷键：<a href="https://zhuanlan.zhihu.com/p/354088977">https://zhuanlan.zhihu.com/p/354088977</a></p>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《程序是怎样跑起来的》阅读笔记</title>
    <link href="/2022/02/02/%E3%80%8A%E7%A8%8B%E5%BA%8F%E6%98%AF%E6%80%8E%E6%A0%B7%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/02/02/%E3%80%8A%E7%A8%8B%E5%BA%8F%E6%98%AF%E6%80%8E%E6%A0%B7%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212091653.png"></p><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>只读了感兴趣的部分，解答了一些感兴趣的问题。 </p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><h3 id="1-4-条件分支和循环机制"><a href="#1-4-条件分支和循环机制" class="headerlink" title="1.4 条件分支和循环机制"></a>1.4 条件分支和循环机制</h3><h4 id="条件分支如何跳转？"><a href="#条件分支如何跳转？" class="headerlink" title="条件分支如何跳转？"></a>条件分支如何跳转？</h4><p>CPU在进行运算时，标志寄存器的数值会根据运算结果自动设定。<strong>条件分支在跳转指令前会进行比较运算。至于是否执行跳转指令，则由CPU在参考标志寄存器的数值后进行判断。</strong></p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212105743.png" alt="运算结果的正、零、负三种状态由标志寄存器的三个位表示"></p><p>CPU执行比较的机制很有意思，例如，假设要比较累加寄存器中存储的XXX值和通用寄存器中存储的YYY值，执行比较的指令后，CPU的运算装置就会在内部（暗中）进行XXX-YYY的减法运算。而无论减法运算的结果是正数、零还是负数，都会保存到标志寄存器中。结果为正表示XXX比YYY大，零表示XXX和YYY相等，负表示XXX比YYY小。<strong>程序中的比较指令，就是在CPU内部做减法运算。</strong></p><h3 id="1-5-函数的调用机制"><a href="#1-5-函数的调用机制" class="headerlink" title="1.5 函数的调用机制"></a>1.5 函数的调用机制</h3><p>哪怕是高级语言编写的程序，函数调用处理也是通过把程序计数器的值设定成函数的存储地址来实现的。不过，这和条件分支、循环的机制有所不同，因为单纯的跳转指令无法实现函数的调用。<strong>函数的调用需要在完成函数内部的处理后，处理流程再返回到函数调用点（函数调用指令的下一个地址）。</strong>因此，如果只是跳转到函数的入口地址，处理流程就不知道应该返回至哪里了。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212120624.png" alt="程序调用函数示例（这里直接展示了C语言的源代码，实际上各地址存储的应该是变换成机器语言后的程序）"></p><p>机器语言的call指令和return指令能够解决这个问题。函数调用使用的是call指令，而不是跳转指令。<strong>在将函数的入口地址设定到程序计数器之前，call指令会把调用函数后要执行的指令地址存储在名为栈的主存内。</strong>函数处理完毕后，再通过函数的出口来执行return命令。<strong>return命令的功能是把保存在栈中的地址设定到程序计数器中。</strong></p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212120706.png" alt="函数调用中程序计数器和栈的职能"></p><h3 id="2-1-用二进制数表示计算机信息的原因"><a href="#2-1-用二进制数表示计算机信息的原因" class="headerlink" title="2.1 用二进制数表示计算机信息的原因"></a>2.1 用二进制数表示计算机信息的原因</h3><p>计算机内部是由IC（Integrated Circuit，集成电路）这种电子部件构成的。<strong>IC的所有引脚，只有直流电压0V或5V两个状态。</strong>也就是说，<strong>IC的一个引脚，只能表示两个状态。</strong>IC的这个特性，决定了计算机的信息数据只能用二进制数来处理。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212122535.png"></p><p>二进制数的位数一般是8位、16位、32位……也就是8的倍数，这是因为计算机所处理的信息的<strong>基本单位</strong>是8位二进制数（8bit）。</p><p>位是最小单位，字节是基本单位。<strong>内存和磁盘都使用字节单位来存储和读写数据，使用位单位则无法读写数据。因此，字节是信息的基本单位。</strong></p><h3 id="2-4-便于计算机处理的“补数”"><a href="#2-4-便于计算机处理的“补数”" class="headerlink" title="2.4 便于计算机处理的“补数”"></a>2.4 便于计算机处理的“补数”</h3><p>二进制数中表示负数值时，一般会把最高位作为符号来使用，因此我们把这个最高位称为符号位。符号位是0时表示正数，符号位是1时表示负数。那么-1用8位二进制数来表示的话是什么样的呢？可能很多人会认为“1的二进制数是00000001，因此-1就是10000001”，但这个答案是错的，正确答案是11111111。</p><p><strong>计算机在做减法运算时，实际上内部是在做加法运算。</strong>为此，在表示负数时就需要使用“二进制的补数”。补数就是用正数来表示负数。</p><p><strong>为了获得补数，我们需要将二进制数的各数位的数值全部取反，然后再将结果加1。</strong></p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212141013.png" alt="用8位二进制数表示-1时，只需求得1（也就是00000001）的补数即可"></p><h4 id="为什么使用补数后就能正确地表示负数了呢？"><a href="#为什么使用补数后就能正确地表示负数了呢？" class="headerlink" title="为什么使用补数后就能正确地表示负数了呢？"></a>为什么使用补数后就能正确地表示负数了呢？</h4><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212141743.png" alt="负数表示有误时的情况"></p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212141833.png" alt="负数表示正确时的情况"></p><p>牢记<strong>“将二进制数的值取反后加1的结果，和原来的值相加，结果为0”</strong>这一法则。</p><p>需要注意，当运算结果为负数时，计算结果的值也是以补数的形式来表示的。</p><p><strong>通过求解补数的补数，就可知该值的绝对值。</strong></p><ul><li>比如3- 5这个运算（3 + （-5）），用8位二进制数表示3时为00000011，而5=00000101的补数为11111011（-5）。因此3- 5其实就是00000011+ 11111011的运算。</li><li>00000011 + 11111011的运算结果为11111110，最高位变成了1，这就表示结果是一个负数，11111110的补数为00000010。因此，11111110表示的就是- 2。</li><li><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212142131.png"></li></ul><h4 id="像-32768～32767这样负数比正数多一个的原因"><a href="#像-32768～32767这样负数比正数多一个的原因" class="headerlink" title="像- 32768～32767这样负数比正数多一个的原因"></a>像- 32768～32767这样负数比正数多一个的原因</h4><p>仔细思考一下补数的机制，大家就会明白像- 32768～32767这样负数比正数多一个的原因了。</p><p><strong>最高位是0</strong>的正数，有0～32767共32768个，这其中也包含0。<strong>最高位是1</strong>的负数，有- 1～- 32768共32768个，这其中不包含0。也就是说，<strong>0包含在正数范围内，所以负数就要比正数多1个。</strong>虽然0不是正数，但考虑到符号位，就将其划分到了正数中。</p><h3 id="2-5-逻辑右移和算术右移的区别"><a href="#2-5-逻辑右移和算术右移的区别" class="headerlink" title="2.5 逻辑右移和算术右移的区别"></a>2.5 逻辑右移和算术右移的区别</h3><p>当二进制数的值<strong>表示图形模式</strong>而非数值时，移位后需要在最高位补0。类似于霓虹灯往右滚动的效果。这就称为逻辑右移。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212142939.png" alt="图形模式的右移（逻辑右移）"></p><p>将二进制数<strong>作为带符号的数值进行运算</strong>时，移位后要在最高位填充移位前符号位的值（0或1）。这就称为算术右移。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212143103.png" alt="逻辑右移和算术右移的区别"></p><p>只有在右移时才必须区分逻辑位移和算术位移。左移时，无论是图形模式（逻辑左移）还是相乘运算（算术左移），都只需在空出来的低位补0即可。</p><p>顺便介绍一下<strong>符号扩充</strong>。以8位二进制数为例，符号扩充就是指在保持值不变的前提下将其转换成16位和32位的二进制数。不管是正数还是用补数表示的负数，都<strong>只需用符号位的值（0或者1）填充高位即可。</strong>这就是符号扩充的方法。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212143443.png" alt="由8位转换成16位的符号扩充方法"></p><h3 id="3-3-计算机运算出错的原因"><a href="#3-3-计算机运算出错的原因" class="headerlink" title="3.3 计算机运算出错的原因"></a>3.3 计算机运算出错的原因</h3><p>二进制数小数转换成十进制数的方法：<strong>将各数位的数值和位权相乘的结果相加即可。</strong></p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212143925.png"></p><p>计算机之所以会出现运算错误，是因为<strong>“有一些十进制数的小数无法转换成二进制数”（用连续的二进制数表示的十进制数是不连续的）</strong>。例如，十进制数0.1，就无法用二进制数正确表示，小数点后面即使有几百位也无法表示。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212144126.png" alt="小数点后4位能够用二进制数表示的数值二进制数是连续的，十进制数是非连贯的"></p><h3 id="3-4-什么是浮点数"><a href="#3-4-什么是浮点数" class="headerlink" title="3.4 什么是浮点数"></a>3.4 什么是浮点数</h3><p>浮点数是指用<strong>符号、尾数、基数和指数</strong>这四部分来表示的小数。因为计算机内部使用的是二进制数，所以基数自然就是2。因此，实际的数据中往往不考虑基数，只用符号、尾数、指数这三部分即可表示浮点数。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212150243.png" alt="浮点数的表现形式"></p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212150307.png" alt="浮点数的内部构造（IEEE的规定）"></p><ul><li><p><strong>符号部分</strong>是指使用一个数据位来表示数值的符号</p><ul><li>该数据位是1时表示负，为0时则表示“正或者0”</li></ul></li><li><p><strong>尾数部分</strong>用的是“将小数点前面的值固定为1的正则表达式”</p><ul><li>具体来讲，就是将二进制数表示的小数左移或右移（这里是逻辑移位，因为符号位是独立的）数次后，整数部分的第1位变为1，第2位之后都变为0（这样是为了消除第2位以上的数位）</li><li>而且，第1位的1在实际的数据中不保存</li><li>由于第1位必须是1，因此，省略该部分后就节省了一个数据位，从而也就可以表示更多的数据范围（虽不算太多）</li></ul></li><li><p><strong>指数部分</strong>用的是“EXCESS系统表现”</p><ul><li><p>使用这种方法主要是为了表示负数时不使用符号位</p></li><li><p>通过将指数部分<strong>表示范围的中间值设为0</strong>，使得负数不需要用符号来表示</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212151826.png" alt="单精度浮点数指数部分的EXCESS系统表现"></p></li></ul></li></ul><h4 id="用单精度浮点数表示-0-75"><a href="#用单精度浮点数表示-0-75" class="headerlink" title="用单精度浮点数表示+0.75"></a>用单精度浮点数表示+0.75</h4><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220212151339.png" alt="用单精度浮点数表示+0.75"></p><p>这里，符号部分为0，指数部分为01111110，尾数部分为10000000000000000000000。</p><ul><li>因为0.75是正数，所以符号位是0。</li><li>指数部分的01111110是十进制数126，用EXCESS系统表现就是- 1（126- 127=- 1）。</li><li>根据正则表达式的规则，小数点前面的第1位是1，因此尾数部分10000000000000000000000实际上表示的是1.10000000000000000000000这个二进制数。将尾数部分的二进制数转换成十进制数，结果就是（1 × 2的0次幂）+（1 × 2的-1次幂）=1.5。</li></ul><p>因此，0-01111110-10000000000000000000000这个单精度浮点数，表示的就是“+ 1.5 × 2的-1次幂”。2的-1次幂是0.5，+ 1.5 × 0.5 = + 0.75。</p><h3 id="3-7-如何避免计算机计算出错"><a href="#3-7-如何避免计算机计算出错" class="headerlink" title="3.7 如何避免计算机计算出错"></a>3.7 如何避免计算机计算出错</h3><p>把小数转换成整数来计算。计算机在进行小数计算时可能会出错，但进行整数计算（只要不超过可处理的数值范围）时一定不会出现问题。因此，进行小数的计算时可以暂时使用整数，然后再把计算结果用小数表示出来即可。</p><p>例如，将0.1相加100次这一计算，就可以转换为将0.1扩大10倍后再将1相加100次的计算，最后把结果除以10就可以了。</p><h3 id="4-2-内存的逻辑模型是楼房"><a href="#4-2-内存的逻辑模型是楼房" class="headerlink" title="4.2 内存的逻辑模型是楼房"></a>4.2 内存的逻辑模型是楼房</h3><p>通过使用变量，即便不指定物理地址，也可以在程序中对内存进行读写。这是因为，在程序运行时，Windows等操作系统会自动决定变量的物理地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">char</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">short</span> b = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">long</span> c = <span class="hljs-number">123</span>;<br></code></pre></td></tr></table></figure><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220227182539.png" alt="变量的数据类型不同，所占用的内存大小也不一样"></p><h4 id="int-4字节-amp-tinyint-1字节"><a href="#int-4字节-amp-tinyint-1字节" class="headerlink" title="int 4字节 &amp; tinyint 1字节"></a>int 4字节 &amp; tinyint 1字节</h4><p>看了上面的图，突然懂了为什么Java的boolean型在数据库里会使用tinyint。</p><h3 id="4-3-简单的指针"><a href="#4-3-简单的指针" class="headerlink" title="4.3 简单的指针"></a>4.3 简单的指针</h3><p>在32位内存地址的环境中，指针变量的长度是多少位？</p><ul><li>32位</li><li>指针指的是<strong>用于存储内存地址的变量</strong></li></ul><h4 id="为什么指针也有数据类型？"><a href="#为什么指针也有数据类型？" class="headerlink" title="为什么指针也有数据类型？"></a>为什么指针也有数据类型？</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 在定义指针时，我们通常会在变量名前加一个*</span><br><span class="hljs-keyword">char</span> *d<br><span class="hljs-keyword">short</span> *e<br><span class="hljs-keyword">long</span> *f<br></code></pre></td></tr></table></figure><p>我们知道，d、e、f都是用来存储地址的变量。然而，为什么这里又用来指定char （1字节）、short（2字节）、long（4字节）这些数据类型呢？实际上，这些数据类型表示的是<strong>从指针存储的地址中一次能够读写的数据字节数</strong>。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220227185558.png" alt="指针的数据类型表示一次可以读写的长度"></p><h3 id="5-1-不读入内存就无法运行"><a href="#5-1-不读入内存就无法运行" class="headerlink" title="5.1 不读入内存就无法运行"></a>5.1 不读入内存就无法运行</h3><p>程序保存在存储设备中，通过有序地被读出来实现运行，这一点大家都很清楚。这一机制称为<strong>存储程序方式</strong>（程序内置方式），现在看来这是理所当然的，但在当时它的提出可以说是一个里程碑。为什么这么说呢？因为在此以前的程序都是通过改变计算机的布线等来变更程序的。</p><p>磁盘中存储的程序，必须要加载到内存后才能运行。在磁盘中保存的原始程序是无法直接运行的。这是因为，<strong>负责解析和运行程序内容的CPU，需要通过内部程序计数器来指定内存地址，然后才能读出程序。</strong></p><h3 id="5-2-磁盘缓存加快了磁盘访问速度"><a href="#5-2-磁盘缓存加快了磁盘访问速度" class="headerlink" title="5.2 磁盘缓存加快了磁盘访问速度"></a>5.2 磁盘缓存加快了磁盘访问速度</h3><p>磁盘缓存指的是<strong>把从磁盘中读出的数据存储到内存空间中</strong>的方式。</p><p>这样一来，当接下来需要读取同一数据时，就不用通过实际的磁盘，而是从磁盘缓存中把内容读出。使用磁盘缓存可以大大改善磁盘数据的访问速度。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220227192642.png" alt="磁盘缓存提高访问速度的机制"></p><p><strong>把低速设备的数据保存在高速设备中，需要时可以直接将其从高速设备中读出</strong>，这种<strong>缓存</strong>的方式在其他情况下也会用到。</p><p>其中的一个实例就是在Web浏览器中的使用。由于Web浏览器是通过网络来获取远程Web服务器的数据并将其显示出来的。因此，在显示较大的图片等文件时，会花费不少时间。于是，Web浏览器就可以把获取的数据暂时保存在磁盘中，然后在需要时再显示磁盘中的数据。也就是说，<strong>把低速的网络数据保存到相对高速的磁盘中。</strong></p><h3 id="5-3-虚拟内存把磁盘作为部分内存来使用"><a href="#5-3-虚拟内存把磁盘作为部分内存来使用" class="headerlink" title="5.3 虚拟内存把磁盘作为部分内存来使用"></a>5.3 虚拟内存把磁盘作为部分内存来使用</h3><p>虚拟内存是指把磁盘的一部分作为假想的内存来使用。这与磁盘缓存是假想的磁盘（实际上是内存）相对，虚拟内存是假想的内存（实际上是磁盘）。</p><p>虚拟内存的方法有<strong>分页式</strong>和<strong>分段式</strong>两种。Windows采用的是分页式。该方式是指，在不考虑程序构造的情况下，把运行的程序按照一定大小的页（page）进行分割，并以页为单位在内存和磁盘间进行置换。分段式则把程序分割成以处理数据集合等为单位的段落，以段落为单位进行置换。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220227212513.png" alt="分页式虚拟内存的机制"></p>]]></content>
    
    
    <categories>
      
      <category>Books</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>实用网址传送门</title>
    <link href="/2022/01/01/%E5%AE%9E%E7%94%A8%E7%BD%91%E5%9D%80%E4%BC%A0%E9%80%81%E9%97%A8/"/>
    <url>/2022/01/01/%E5%AE%9E%E7%94%A8%E7%BD%91%E5%9D%80%E4%BC%A0%E9%80%81%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>主站下的子链接是我当时决定留下主站的原因。</p></blockquote><h2 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h2><p>HowToDoInJava：<a href="https://howtodoinjava.com/">https://howtodoinjava.com/</a></p><ul><li><a href="https://howtodoinjava.com/java-concurrency-tutorial/">https://howtodoinjava.com/java-concurrency-tutorial/</a></li></ul><p>Web前端面试：<a href="https://vue3js.cn/interview/">https://vue3js.cn/interview/</a></p><h2 id="Communities"><a href="#Communities" class="headerlink" title="Communities"></a>Communities</h2><p>GeeksforGeeks：<a href="https://www.geeksforgeeks.org/">https://www.geeksforgeeks.org/</a></p><ul><li><a href="https://www.geeksforgeeks.org/random-forest-regression-in-python/">https://www.geeksforgeeks.org/random-forest-regression-in-python/</a></li></ul><h2 id="Black-Tech"><a href="#Black-Tech" class="headerlink" title="Black Tech"></a>Black Tech</h2><p>Mac  v2ray：<a href="https://bwgbus.com/1558.html">https://bwgbus.com/1558.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>算法题的一些tricks（持续更新）</title>
    <link href="/2021/12/28/%E7%AE%97%E6%B3%95%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9Btricks/"/>
    <url>/2021/12/28/%E7%AE%97%E6%B3%95%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9Btricks/</url>
    
    <content type="html"><![CDATA[<blockquote><p>首先声明：时间复杂度主要是看<strong>每一个元素被操作的次数</strong>，不要以为for里放一个while就觉得是O(n^2)啊。</p></blockquote><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="要不要加"><a href="#要不要加" class="headerlink" title="要不要加="></a>要不要加=</h3><h4 id="while-left-lt-right"><a href="#while-left-lt-right" class="headerlink" title="while (left &lt;= right)"></a>while (left &lt;= right)</h4><p>定义 target 是在一个在左闭右闭的区间里，<strong>也就是[left, right]</strong> </p><p>if (nums[middle] &gt; target) ，right 更新为 middle - 1（**右闭，能取到nums[middle - 1]**）</p><h4 id="while-left-lt-right-1"><a href="#while-left-lt-right-1" class="headerlink" title="while (left &lt; right)"></a>while (left &lt; right)</h4><p>这里使用 &lt;，因为left == right在区间[left, right)是没有意义的</p><p>定义 target 是在一个在左闭右开的区间里，<strong>也就是[left, right)</strong> </p><p>if (nums[middle] &gt; target) ，right 更新为 middle（<strong>右开，取不到nums[middle]，还是从nums[middle - 1]开始</strong>）</p><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><p>双指针法将时间复杂度O(n^2)的解法优化为O(n)的解法，也就是<strong>降一个数量级</strong>。</p><p>常用于需要<strong>排序</strong>的场景：</p><ul><li>最大值在数组的两端，双指针比较后排序 <a href="https://leetcode-cn.com/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></li></ul><h3 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h3><p>通过一个快指针和一个慢指针<strong>在一个for循环下完成两个for循环的工作</strong>。</p><p>常用于：</p><ul><li>不使用额外的数组空间，<strong>原地</strong>修改输入数组 <a href="https://leetcode-cn.com/problems/remove-element/">27. 移除元素</a></li><li><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></li></ul><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><p>所谓滑动窗口，<strong>就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果，可将O(n^2)的暴力解法降为O(n)。</strong></p><ul><li><a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/">209. 长度最小的子数组</a></li></ul><h2 id="螺旋数组"><a href="#螺旋数组" class="headerlink" title="螺旋数组"></a>螺旋数组</h2><p>顺时针打印数组，边界条件非常多，要找到固定的规则来遍历：每一圈<strong>左闭右开</strong>或<strong>左开右闭</strong>。</p><ul><li><a href="https://leetcode-cn.com/problems/spiral-matrix-ii/">59. 螺旋矩阵 II</a></li></ul><h2 id="用数组来做哈希"><a href="#用数组来做哈希" class="headerlink" title="用数组来做哈希"></a>用数组来做哈希</h2><p>用数组来做哈希，是因为<strong>题目都限制了数值的大小</strong>，比如字符相关的题目，一般只需要26个下标。</p><p>而如果哈希值比较少、特别分散、跨度非常大，使用数组就造成空间的极大浪费。这时需要用set，但set比数组慢，因为要做hash计算。</p><p>常用于：</p><ul><li>array：<a href="https://leetcode-cn.com/problems/valid-anagram/">242. 有效的字母异位词</a></li><li>set：<a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/">349. 两个数组的交集</a></li></ul><h2 id="数组填充"><a href="#数组填充" class="headerlink" title="数组填充"></a>数组填充</h2><p><strong>很多数组填充类的问题，都可以先预先给数组扩容到填充后的大小，然后再从后向前进行操作。</strong></p><p>优点：</p><ul><li>不用申请新数组</li><li>避免了从前先后填充元素带来的每次添加元素都要将原有元素向后移动</li><li><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></li></ul><h2 id="翻转字符串"><a href="#翻转字符串" class="headerlink" title="翻转字符串"></a>翻转字符串</h2><h3 id="反转整个字符串"><a href="#反转整个字符串" class="headerlink" title="反转整个字符串"></a>反转整个字符串</h3><ul><li><a href="https://leetcode-cn.com/problems/reverse-string/">344. 反转字符串</a></li><li>想法是左半边和右半边依次相互调换，故第一时间想到的是 <code>for i in range(right // 2)</code>，但 <code>left &lt; right</code> 天然区分了左右部分，且奇偶情况都成立。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverseString</span>(<span class="hljs-params">self, s: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span><br>        <br>        <span class="hljs-comment"># 该方法已经不需要判断奇偶数 时间空间复杂度比用for i in range(right // 2)更低</span><br>        <span class="hljs-keyword">while</span> left &lt; right:<br>            s[left], s[right] = s[right], s[left]<br>            left += <span class="hljs-number">1</span><br>            right -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="KMP处理字符串匹配"><a href="#KMP处理字符串匹配" class="headerlink" title="KMP处理字符串匹配"></a>KMP处理字符串匹配</h2><blockquote><p><a href="https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html">代码随想录：帮你把KMP算法学个通透</a></p></blockquote><p>KMP的主要思想是<strong>当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了。</strong></p><p>使用KMP可以解决两类经典问题：</p><ul><li><p>匹配问题：<a href="https://leetcode-cn.com/problems/implement-strstr/">28. 实现 strStr()</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strStr</span>(<span class="hljs-params">self, haystack: <span class="hljs-built_in">str</span>, needle: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-comment"># 当 needle 是空字符串时我们应当返回 0</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(needle) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-built_in">next</span> = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(needle)<br>        self.getNext(<span class="hljs-built_in">next</span>, needle)<br>        j = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(haystack)):<br>            <span class="hljs-keyword">while</span> j &gt; -<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> haystack[i] != needle[j + <span class="hljs-number">1</span>]:<br>                j = <span class="hljs-built_in">next</span>[j] <span class="hljs-comment"># 不匹配 j回到之前匹配的位置</span><br>            <span class="hljs-keyword">if</span> haystack[i] == needle[j + <span class="hljs-number">1</span>]:<br>                j += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># j+1表示当前位置 此时j+1 == len(haystack) 循环已经走到haystack最后一位</span><br>            <span class="hljs-keyword">if</span> j == <span class="hljs-built_in">len</span>(needle) - <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> i - <span class="hljs-built_in">len</span>(needle) + <span class="hljs-number">1</span> <span class="hljs-comment"># 返回haystack中出现needle的第一个位置</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <br>    <span class="hljs-comment"># 获取next数组</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getNext</span>(<span class="hljs-params">self, <span class="hljs-built_in">next</span>, needle</span>):</span><br>        <span class="hljs-comment"># 初始化起始位置为-1</span><br>        j = -<span class="hljs-number">1</span><br>        <span class="hljs-built_in">next</span>[<span class="hljs-number">0</span>] = j<br>        <span class="hljs-comment"># 因为j初始化为-1 那么i就从1开始 进行s[i]与s[j+1]的比较</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(needle)):<br>            <span class="hljs-keyword">while</span> j &gt; -<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> needle[i] != needle[j + <span class="hljs-number">1</span>]:<br>                j = <span class="hljs-built_in">next</span>[j] <span class="hljs-comment"># 不匹配则回退</span><br>            <span class="hljs-keyword">if</span> needle[i] == needle[j + <span class="hljs-number">1</span>]:<br>                j += <span class="hljs-number">1</span> <span class="hljs-comment"># 匹配j增一</span><br>            <span class="hljs-built_in">next</span>[i] = j <span class="hljs-comment"># 从下标1之后的next数组每次i循环都更新 值为j</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure></li><li><p>重复子串问题：<a href="https://leetcode-cn.com/problems/repeated-substring-pattern/">459. 重复的子字符串</a></p></li></ul><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p><strong>想清楚局部最优，想清楚全局最优，感觉局部最优是可以推出全局最优，并想不出反例，那么就试一试贪心</strong>。</p><p>用了一个index来控制饼干数组的遍历，遍历饼干并没有再起一个for循环，而是采用自减的方式，这也是常用的技巧。</p><p>有的同学看到要遍历两个数组，就想到用两个for循环，那样逻辑其实就复杂了。</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python3刷题踩坑集锦（持续更新）</title>
    <link href="/2021/12/17/Python3%E5%88%B7%E9%A2%98%E8%B8%A9%E8%BF%87%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <url>/2021/12/17/Python3%E5%88%B7%E9%A2%98%E8%B8%A9%E8%BF%87%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h2 id="新建-amp-赋值"><a href="#新建-amp-赋值" class="headerlink" title="新建 &amp; 赋值"></a>新建 &amp; 赋值</h2><h3 id="同时赋值“，”隔开"><a href="#同时赋值“，”隔开" class="headerlink" title="同时赋值“，”隔开"></a>同时赋值“，”隔开</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverseString</span>(<span class="hljs-params">self, s: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Do not return anything, modify s in-place instead.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left &lt; right: <span class="hljs-comment"># 不用判断奇偶</span><br>        <span class="hljs-comment"># for i in range(len(s) // 2):</span><br>            <span class="hljs-comment"># 这三句太智障了</span><br>            <span class="hljs-comment"># tmp = s[left]</span><br>            <span class="hljs-comment"># s[left] = s[right]</span><br>            <span class="hljs-comment"># s[right] = tmp</span><br>            <span class="hljs-comment"># 直接一句话搞定</span><br>            s[left], s[right] = s[right], s[left]<br>            left += <span class="hljs-number">1</span><br>            right -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="新建结果列表"><a href="#新建结果列表" class="headerlink" title="新建结果列表"></a>新建结果列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 空链表</span><br>empty_list = []<br><br><span class="hljs-comment"># 需要倒序添加元素的链表 需指定长度</span><br><span class="hljs-comment"># 否则报错 IndexError: list assignment index out of range</span><br>res = [-<span class="hljs-number">1</span>] * <span class="hljs-built_in">len</span>(nums)<br></code></pre></td></tr></table></figure><h3 id="新建数组"><a href="#新建数组" class="headerlink" title="新建数组"></a>新建数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Java: int[] next = new int[needle.length()];</span><br><span class="hljs-built_in">next</span> = [<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(needle))]<br><span class="hljs-built_in">next</span> = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(needle)<br></code></pre></td></tr></table></figure><h3 id="新建二维数组"><a href="#新建二维数组" class="headerlink" title="新建二维数组"></a>新建二维数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 新建一个 n × n 的数组</span><br>matrix = [[<span class="hljs-number">0</span>] * n <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">m, n = <span class="hljs-number">3</span>, <span class="hljs-number">4</span><br><span class="hljs-comment"># 浅拷贝 也就是把一个列表重复了n次</span><br>dp1 = [[<span class="hljs-number">0</span>] * n ] * m <br><span class="hljs-comment"># 深拷贝 即创建</span><br>dp2 = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n) ] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)]<br>dp3 = [[<span class="hljs-number">0</span>] * n <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)]<br>dp1[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">3</span><br>dp2[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">3</span><br>dp3[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dp1:&#x27;</span>,dp1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dp2:&#x27;</span>,dp2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dp2:&#x27;</span>,dp3)<br><br>dp1: [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>]]<br>dp2: [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]<br>dp2: [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]<br></code></pre></td></tr></table></figure><h3 id="dict-相当于Java中的map"><a href="#dict-相当于Java中的map" class="headerlink" title="dict()相当于Java中的map"></a>dict()相当于Java中的map</h3><h4 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict()"></a>defaultdict()</h4><ul><li>如果key不存在于字典中，将会添加该key并将value设为默认值</li><li><a href="https://nfwcap.github.io/2019/03/05/%E5%85%B3%E4%BA%8EPython-collections-defaultdict-%E4%B8%8Edict%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB/">关于Python collections.defaultdict()与dict的使用和区别 | 帽子不太白 (nfwcap.github.io)</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><br>dic = defaultdict(<span class="hljs-built_in">int</span>) <span class="hljs-comment"># int表示初始化类型</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>dic[num] += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(dic) <span class="hljs-comment"># defaultdict(&lt;class &#x27;int&#x27;&gt;, &#123;0: 1, 1: 1, 2: 1&#125;)</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><br>dic1 = defaultdict(<span class="hljs-built_in">int</span>)<br><span class="hljs-built_in">print</span>(dic1[<span class="hljs-string">&#x27;a&#x27;</span>]) <span class="hljs-comment"># 0</span><br><br>dic2 = defaultdict(<span class="hljs-built_in">list</span>)<br><span class="hljs-built_in">print</span>(dic2[<span class="hljs-string">&#x27;a&#x27;</span>]) <span class="hljs-comment"># []</span><br><br>dic3 = defaultdict(<span class="hljs-built_in">dict</span>)<br><span class="hljs-built_in">print</span>(dic3[<span class="hljs-string">&#x27;a&#x27;</span>]) <span class="hljs-comment"># &#123;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="dict"><a href="#dict" class="headerlink" title="dict()"></a>dict()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dic = <span class="hljs-built_in">dict</span>()<br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>dic[num] += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(dic) <span class="hljs-comment"># KeyError</span><br></code></pre></td></tr></table></figure><h4 id="dict-枚举取值"><a href="#dict-枚举取值" class="headerlink" title="dict()枚举取值"></a>dict()枚举取值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">twoSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:</span><br>        records = <span class="hljs-built_in">dict</span>()<br><br>        <span class="hljs-comment"># 用枚举更方便，就不需要通过索引再去取当前位置的值</span><br>        <span class="hljs-keyword">for</span> idx, val <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            <span class="hljs-keyword">if</span> target - val <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> records:<br>                records[val] = idx<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> [records[target - val], idx] <span class="hljs-comment"># 如果存在就返回字典记录索引和当前索引</span><br></code></pre></td></tr></table></figure><h3 id="list的神奇取值方式"><a href="#list的神奇取值方式" class="headerlink" title="list的神奇取值方式"></a>list的神奇取值方式</h3><p>连续两个[]可以表示第几个元素的第几个字符（下标从0开始计数）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>words = [<span class="hljs-string">&quot;bella&quot;</span>,<span class="hljs-string">&quot;lab&quot;</span>,<span class="hljs-string">&quot;roller&quot;</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(words[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])) <span class="hljs-comment"># lab中的a 97</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(words[<span class="hljs-number">1</span>])) <span class="hljs-comment">#TypeError: ord() expected a character, but string of length 3 found</span><br></code></pre></td></tr></table></figure><h3 id="list和str的转换"><a href="#list和str的转换" class="headerlink" title="list和str的转换"></a>list和str的转换</h3><ul><li>str =&gt; list：res = list(s)</li><li>list =&gt; str：’’.join(res)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">replaceSpace</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:</span><br>        <span class="hljs-comment"># count()是str的方法 统计字符串里某个字符或子字符串出现的次数</span><br>        counter = s.count(<span class="hljs-string">&#x27; &#x27;</span>)<br>        res = <span class="hljs-built_in">list</span>(s)<br>        <span class="hljs-comment"># res.extend([&#x27;  &#x27;] * counter) 不能识别两个空格</span><br>        <span class="hljs-comment"># 每碰到一个空格就多拓展两个空格 1 + 2 = 3个位置存&#x27;%20&#x27;</span><br>        res.extend([<span class="hljs-string">&#x27; &#x27;</span>] * counter * <span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># left原始字符串的末尾 right拓展后的末尾</span><br>        left, right = <span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(res) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left &gt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> res[left] != <span class="hljs-string">&#x27; &#x27;</span>:<br>                res[right] = res[left]<br>                right -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># [)</span><br>                res[right - <span class="hljs-number">2</span> : right + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;%20&#x27;</span><br>                right -= <span class="hljs-number">3</span><br>            left -= <span class="hljs-number">1</span><br>        <span class="hljs-comment"># return str join()是str的方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(res)<br></code></pre></td></tr></table></figure><h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><h3 id="和"><a href="#和" class="headerlink" title="/和//"></a>/和//</h3><ul><li>/：浮点数除法</li><li>//：整数除法</li></ul><h3 id="和-1"><a href="#和-1" class="headerlink" title="*和**"></a>*和**</h3><ul><li>* ：乘法</li><li>**：乘方</li></ul><h3 id="infinite做“记号”"><a href="#infinite做“记号”" class="headerlink" title="infinite做“记号”"></a>infinite做“记号”</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">res = <span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;inf&quot;</span>) <span class="hljs-comment"># 定义一个无限大的数</span><br>res = <span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;-inf&quot;</span>) <span class="hljs-comment"># 定义一个无限小的数</span><br></code></pre></td></tr></table></figure><h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> res == <span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;inf&quot;</span>) <span class="hljs-keyword">else</span> res<br></code></pre></td></tr></table></figure><h2 id="循环-amp-判断"><a href="#循环-amp-判断" class="headerlink" title="循环 &amp; 判断"></a>循环 &amp; 判断</h2><h3 id="python中的递归"><a href="#python中的递归" class="headerlink" title="python中的递归"></a>python中的递归</h3><ul><li><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20211226224708.png"></h5></li><li><h5 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20211226224341.png"></h5></li></ul><h3 id="用while代替if"><a href="#用while代替if" class="headerlink" title="用while代替if"></a>用while代替if</h3><p>当<strong>只需要</strong>处理<strong>满足触发条件</strong>的情况时，用while，否则还需要处理if的else情况。</p><p>不要看字面意思，以为while就是一个循环，if就是一个判断。</p><h3 id="多余"><a href="#多余" class="headerlink" title="多余()"></a>多余()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># if (left &lt;= right): ×</span><br><span class="hljs-keyword">if</span> left &lt;= right:<br></code></pre></td></tr></table></figure><h3 id="模拟Java-for循环"><a href="#模拟Java-for循环" class="headerlink" title="模拟Java for循环"></a>模拟Java for循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># for(int i = left; i &lt; right; i++)</span><br><span class="hljs-built_in">range</span>(left, right) <br><span class="hljs-built_in">range</span>(left, right, <span class="hljs-number">1</span>) <br><br><span class="hljs-comment"># for(int i = left; i &lt; right; i--)</span><br><span class="hljs-built_in">range</span>(left, right, -<span class="hljs-number">1</span>) <br><br><span class="hljs-comment"># for(int i = 0; i &lt; 10; i += 3)</span><br><span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># 0~10 _表示下面的代码不会用到循环数 缺省表示</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><h3 id="ord"><a href="#ord" class="headerlink" title="ord()"></a>ord()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-number">97</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>git clone项目到本地之后要做哪些事</title>
    <link href="/2021/12/16/git%20clone%E9%A1%B9%E7%9B%AE%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%B9%8B%E5%90%8E%E8%A6%81%E5%81%9A%E5%93%AA%E4%BA%9B%E4%BA%8B/"/>
    <url>/2021/12/16/git%20clone%E9%A1%B9%E7%9B%AE%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%B9%8B%E5%90%8E%E8%A6%81%E5%81%9A%E5%93%AA%E4%BA%9B%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="1-选择合适的分支checkout"><a href="#1-选择合适的分支checkout" class="headerlink" title="1. 选择合适的分支checkout"></a>1. 选择合适的分支checkout</h3><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/67C7CDB9-7566-4C92-8D6F-F6BCBA9F4246.png"></p><h3 id="2-gradle"><a href="#2-gradle" class="headerlink" title="2. gradle"></a>2. gradle</h3><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/F21BBC94-2E45-48BC-8A26-AB1836F74E5E.png"></p><ul><li>Build and run using选择IDEA<ul><li><a href="https://blog.csdn.net/qq_27579471/article/details/113764405">原因：xxx.war not found for the web module</a></li></ul></li><li>选择适宜的gradle版本<ul><li>主要是版本别太高，否则以前的gradle项目可能启动失败</li><li><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/F4388B49-EF11-43E3-AC35-BC84889377D9.png"></li></ul></li><li>buildDependents<ul><li>导入依赖，解决代码爆红问题</li><li><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/6B78ADD5-1330-4B31-AFC5-2AB35F00CAAE.png"></li></ul></li></ul><h3 id="3-拷贝配置文件"><a href="#3-拷贝配置文件" class="headerlink" title="3. 拷贝配置文件"></a>3. 拷贝配置文件</h3><blockquote><p>简易版（注意 <code>pwd</code> 查看当前文件夹）：</p><ul><li>不同服务器：<code>scp -q -r root@192.168.4.117:/var/kingdee/ .</code><ul><li>将 <code>192.168.4.117</code> 服务器中 <code>/var/kingdee/</code> 这个目录下的所有文件和文件夹 <code>-r</code> 安全拷贝到当前目录，不显示传输进度条 <code>-q</code></li></ul></li><li>同一服务器：<code>sudo cp -r /var/kingdee/. /opt/kingdee</code><ul><li><code>.</code> 表示包含隐藏文件</li></ul></li></ul></blockquote><ul><li>登陆配置文件服务器 <code>ssh root@192.168.4.117</code><ul><li><code>cd /var</code></li><li><code>zip -q -r kingdee.zip kingdee/</code><ul><li>将 <code>kingdee/</code> 这个目录下的所有文件和文件夹 <code>-r</code> 打包为当前目录下的 <code>kingdee.zip</code>，不显示指令执行过程 <code>-q</code></li><li><a href="http://test.runoob.com/linux/linux-comm-zip.html">Linux zip命令</a></li></ul></li></ul></li><li><code>command + alt</code> 打开新窗口<ul><li><code>cd /var</code></li><li><code>scp root@192.168.4.117:/var/kingdee.zip .</code><ul><li><code>scp</code> 是 secure copy 的缩写, <code>scp</code> 是 linux 系统之间基于 ssh 登陆进行安全的远程文件拷贝命令</li><li><a href="https://www.runoob.com/linux/linux-comm-scp.html">Linux scp命令</a></li></ul></li><li><code>unzip kingdee.zip</code></li></ul></li></ul><h3 id="4-给文件夹及文件配置权限"><a href="#4-给文件夹及文件配置权限" class="headerlink" title="4. 给文件夹及文件配置权限"></a>4. 给文件夹及文件配置权限</h3><ul><li><p><code>sudo chmod -R 777 /opt/genechem/kingdee</code> </p><ul><li><p>谨慎777，一般666就够用了</p></li><li><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20220116013005.png"></p></li><li><p>第一个字符显示文件类型，它可以是常规文件(-)、目录(d)、符号链接(l)等</p></li></ul></li></ul><h3 id="5-启动项目"><a href="#5-启动项目" class="headerlink" title="5. 启动项目"></a>5. 启动项目</h3><ul><li><p>后端</p><ul><li>debug模式hotfix方式</li></ul></li><li><p>vue前端</p><ul><li><p>进入<code>package.json</code>所在文件夹</p><ul><li><p><code>npm install</code>下载需要的模块</p></li><li><p>有<code>yarn.lock</code>则<code>yarn serve</code>，无<code>yarn.lock</code>则<code>npm run dev</code></p></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Projects</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode &amp; Python3 起步</title>
    <link href="/2021/12/07/LeetCode%20&amp;%20Python3%20%E8%B5%B7%E6%AD%A5/"/>
    <url>/2021/12/07/LeetCode%20&amp;%20Python3%20%E8%B5%B7%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode.com/problem-list/79h8rn6/">Top 100 Liked Questions</a></p><h2 id="Python3上手"><a href="#Python3上手" class="headerlink" title="Python3上手"></a>Python3上手</h2><p>最初是用Java刷题的，因为比较熟悉，后来逛豆瓣看到了一篇文章<a href="https://www.douban.com/group/topic/198471155/#86979479iXdmPf">随便聊聊编程语言 </a>，里面有一个案例感觉很受启发：</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20211212160958.png"></p><p>确实，Java很依赖IDE，第一次在牛客笔试，差点连main函数都敲不出来。而且看题解，JavaScript、Python等语言都很清晰，Java就是一大坨堆在那里，一些基本的输入输出语句也很冗杂。正好毕设需要用Python做可视化，就想着趁着这个机会练一下Python语法，用它来刷题巩固一下。</p><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p><code>def twoSum(self, nums: List[int], target: int) -&gt; List[int]:</code></p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20211212155740.png"></p><h4 id="self"><a href="#self" class="headerlink" title="self"></a>self</h4><p>表示创建的类的<strong>实例本身</strong>。</p><ul><li><p>在Python里，要想使instance.method()这个格式可以正常工作，在class里面编写method的时候，就必须把变量的第一个位子留出来，<strong>用来指代未来call这个method的instance</strong></p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20211214225857.png"></p></li><li><p>留出来的这个位子，可以叫任何名字，只不过为了代码的优美，大部分人选择使用self，来指代使用这个method的instance他自己</p></li><li><p>如果在method里面要改变instance的属性，可以用self.xxx来指代这个属性进行修改</p></li></ul><p><a href="https://zhuanlan.zhihu.com/p/95788606">python里面的self，是谁啊？ - 知乎 (zhihu.com)</a></p><h4 id="nums-List-int"><a href="#nums-List-int" class="headerlink" title="nums: List[int]"></a>nums: List[int]</h4><p>说明参数的数据类型</p><h4 id="gt-List-int"><a href="#gt-List-int" class="headerlink" title="-&gt; List[int]"></a>-&gt; List[int]</h4><p>说明函数的返回类型</p><h2 id="Sublime测试"><a href="#Sublime测试" class="headerlink" title="Sublime测试"></a>Sublime测试</h2><p><code>ctrl + b</code> 即可运行程序。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20211212160045.png"></p><h3 id="from-typing-import-List"><a href="#from-typing-import-List" class="headerlink" title="from typing import List"></a>from typing import List</h3><p><code>typing</code> 是从<code>python3.6</code>开始新增的专用于类型注解(type hints)的模块，为Python程序提供静态类型检查，防止运行时出现参数和返回值类型不符合的情况。</p><ul><li>静态类型检查是基于对程序<strong>源代码</strong>的分析来验证程序的类型安全性的过程</li><li>动态类型检查是在<strong>运行时</strong>验证程序的类型安全性的过程</li></ul><p><a href="https://docs.python.org/3.6/library/typing.html">官方文档：26.1. typing — Support for type hints — Python 3.6.15 documentation</a></p><h3 id="if-name-‘-main-’"><a href="#if-name-‘-main-’" class="headerlink" title="if __name__ == ‘__main__’"></a>if __name__ == ‘__main__’</h3><p><code>__name__</code>属性是Python的一个内置属性，记录了一个字符串。</p><ul><li>若是在当前文件，<code>__name__ </code>是<code> __main__</code></li><li>若是导入的文件，<code>__name__</code> 是模块名</li></ul><p>因此<code>__name__ == &#39;__main__&#39;</code>就表示在当前文件中，可以在<code>if __name__ == &#39;__main__&#39;  :</code>条件下写入测试代码，<strong>如此可以避免测试代码在模块被导入后执行</strong>。</p><p><a href="https://www.zhihu.com/question/49136398/answer/1654722335"><code>if __name__ == &#39;__main__&#39; </code>如何正确理解? - 初识CV的回答 - 知乎</a></p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常用设计模式一句话总结</title>
    <link href="/2021/10/10/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%80%BB%E7%BB%93/"/>
    <url>/2021/10/10/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="设计模式是什么"><a href="#设计模式是什么" class="headerlink" title="设计模式是什么"></a>设计模式是什么</h2><blockquote><p>学习网站：</p><ul><li><a href="https://refactoringguru.cn/design-patterns">设计模式</a></li><li><a href="https://www.journaldev.com/1827/java-design-patterns-example-tutorial">Java Design Patterns – Example Tutorial</a></li></ul></blockquote><p><strong>设计模式</strong>是软件设计中常见问题的<strong>典型解决方案</strong>。 它们就像能根据需求进行调整的预制蓝图， 可用于解决代码中反复出现的设计问题。</p><ul><li>算法更像是菜谱： 提供达成目标的明确步骤</li><li>而模式更像是蓝图： 你可以看到最终的结果和模式的功能， 但需要<strong>自己确定实现步骤</strong></li></ul><h2 id="模式的历史"><a href="#模式的历史" class="headerlink" title="模式的历史"></a>模式的历史</h2><p>模式是面向对象设计中常见问题的典型解决方案。<strong>同样的解决方案在各种项目中得到了反复使用， 所以最终有人给它们起了名字， 并对其进行了详细描述。</strong>这基本上就是模式被发现的历程了。</p><ul><li>模式的概念是由Christopher Alexander在其著作 《建筑模式语言》 中首次提出的。 本书介绍了城市设计的 “语言”， 而此类 “语言” 的基本单元就是模式。 模式中可能会包含对窗户应该在多高、 一座建筑应该有多少层以及一片街区应该有多大面积的植被等信息的描述。</li><li>Erich Gamma、 John Vlisside、 Ralph Johnson和Richard Helm这四位作者接受了模式的概念。 1994 年， 他们出版了 《<a href="https://refactoringguru.cn/gof-book">设计模式： 可复用面向对象软件的基础</a>》 一书， 将设计模式的概念应用到程序开发领域中。 该书提供了 23 个模式来解决面向对象程序设计中的各种问题， 很快便成为了畅销书。 由于书名太长， 人们将其简称为 “四人组 （Gang of Four， GoF） 的书”， 并且很快进一步简化为 “GoF 的书”。</li><li>此后， 人们又发现了几十种面向对象的模式。  “模式方法” 开始在其他程序开发领域中流行起来。 如今， 在面向对象设计领域之外， 人们也提出了许多其他的模式。</li></ul><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>所有模式可以根据其意图或目的来分类。</p><ul><li><p><strong>创建型模式</strong></p><ul><li>这类模式提供<strong>创建对象</strong>的机制，能够提升已有代码的灵活性和可复用性</li></ul></li><li><p><strong>结构型模式</strong></p><ul><li>这类模式介绍如何<strong>将对象和类组装成较大的结构</strong>，并同时保持结构的灵活和高效</li></ul></li><li><p><strong>行为模式</strong></p><ul><li>这类模式负责<strong>对象间的高效沟通和职责委派</strong></li></ul></li></ul><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20Design%20Patterns.png"></p>]]></content>
    
    
    <categories>
      
      <category>Design Patterns</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的层序遍历</title>
    <link href="/2021/09/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2021/09/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h3 id="1-从上往下打印二叉树"><a href="#1-从上往下打印二叉树" class="headerlink" title="1. 从上往下打印二叉树"></a>1. 从上往下打印二叉树</h3><p>从上往下打印出二叉树的每个节点，同层节点从左至右打印。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li>层序遍历，又称二叉树的 <strong>广度优先搜索</strong>（BFS）</li><li>BFS 通常借助 <strong>队列</strong> 的先入先出特性来实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">public class TreeNode &#123;</span><br><span class="hljs-comment">    int val = 0;</span><br><span class="hljs-comment">    TreeNode left = null;</span><br><span class="hljs-comment">    TreeNode right = null;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public TreeNode(int val) &#123;</span><br><span class="hljs-comment">        this.val = val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// import java.util.*; 报错 cannot use &lt;&gt; with non-generic class LinkedList (etc</span><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ArrayList&lt;Integer&gt; <span class="hljs-title">PrintFromTopToBottom</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <br>        <span class="hljs-comment">// 结果链表</span><br>        ArrayList&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-comment">// 辅助队列 利用FIFO特性</span><br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <br>        <span class="hljs-comment">// 空结点 直接返回空结果链表</span><br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> res;<br>        <span class="hljs-comment">// 根结点入队</span><br>        queue.add(root);<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty()) &#123;<br>            <span class="hljs-comment">// 根结点先出队 后面按顺序出队</span><br>            TreeNode temp = queue.poll();<br>            <span class="hljs-comment">// 每出队一个 就加入结果链表</span><br>            res.add(temp.val);<br>            <span class="hljs-comment">// 同一层 从左至右加入</span><br>            <span class="hljs-keyword">if</span>(temp.left != <span class="hljs-keyword">null</span>) queue.add(temp.left);<br>            <span class="hljs-keyword">if</span>(temp.right != <span class="hljs-keyword">null</span>) queue.add(temp.right);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(n) </li></ul><h3 id="2-每一层打印到一行"><a href="#2-每一层打印到一行" class="headerlink" title="2. 每一层打印到一行"></a>2. 每一层打印到一行</h3><p>从上往下打印出二叉树的每个节点，同一层结点从左至右输出，每一层输出一行。</p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><ul><li>层序遍历“断句问题”，怎样把每一层断开<ul><li>根据<code>queue.size()</code>分层，每层都存在一个<code>ArrayList</code>里</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">public class TreeNode &#123;</span><br><span class="hljs-comment">    int val = 0;</span><br><span class="hljs-comment">    TreeNode left = null;</span><br><span class="hljs-comment">    TreeNode right = null;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public TreeNode(int val) &#123;</span><br><span class="hljs-comment">        this.val = val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    ArrayList&lt;ArrayList&lt;Integer&gt; &gt; Print(TreeNode pRoot) &#123;<br>        <br>        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <br>        <span class="hljs-keyword">if</span>(pRoot == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> res;<br>        queue.add(pRoot);<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty()) &#123;<br>            <span class="hljs-comment">// 每层都存在一个ArrayList里</span><br>            ArrayList&lt;Integer&gt; temp = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = queue.size(); i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>                TreeNode node = queue.poll();<br>                temp.add(node.val);<br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-keyword">null</span>) queue.add(node.left);<br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-keyword">null</span>) queue.add(node.right);<br>            &#125;<br>            res.add(temp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(n) </li></ul><h3 id="3-按之字形顺序打印二叉树"><a href="#3-按之字形顺序打印二叉树" class="headerlink" title="3. 按之字形顺序打印二叉树"></a>3. 按之字形顺序打印二叉树</h3><p>第一层从左向右，下一层从右向左，一直这样交替。</p><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><ul><li>“断句”</li><li>使用<strong>双端队列</strong>，分奇偶层<ul><li><strong>打印奇数层：</strong> <strong>从左向右</strong> 打印，<strong>先左后右</strong> 加入下层节点</li><li>若 <code>deque</code> 为空，说明向下无偶数层，则跳出</li><li><strong>打印偶数层：</strong> <strong>从右向左</strong> 打印，<strong>先右后左</strong> 加入下层节点</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">public class TreeNode &#123;</span><br><span class="hljs-comment">    int val = 0;</span><br><span class="hljs-comment">    TreeNode left = null;</span><br><span class="hljs-comment">    TreeNode right = null;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public TreeNode(int val) &#123;</span><br><span class="hljs-comment">        this.val = val;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Deque;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt; &gt; Print(TreeNode pRoot) &#123;<br>        <br>        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        Deque&lt;TreeNode&gt; deque = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <br>        <span class="hljs-keyword">if</span>(pRoot == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> res;<br>        deque.add(pRoot);<br>        <span class="hljs-keyword">while</span>(!deque.isEmpty()) &#123;<br>            ArrayList&lt;Integer&gt; temp = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = deque.size(); i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>                <span class="hljs-comment">// 奇数层 从左到右打印</span><br>                TreeNode node = deque.removeFirst();<br>                temp.add(node.val);<br>                <span class="hljs-comment">// addLast 从左到右添加偶数层结点</span><br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-keyword">null</span>) deque.addLast(node.left);<br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-keyword">null</span>) deque.addLast(node.right);<br>            &#125;<br>            res.add(temp);<br>            <br>            <span class="hljs-comment">// 没有下一层 提前跳出</span><br>            <span class="hljs-keyword">if</span>(deque.isEmpty()) <span class="hljs-keyword">break</span>;<br>            <br>            temp = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = deque.size(); i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>                <span class="hljs-comment">// 偶数层 从右到左打印</span><br>                TreeNode node = deque.removeLast();<br>                temp.add(node.val);<br>                <span class="hljs-comment">// addFirst 从右到左添加奇数层结点</span><br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-keyword">null</span>) deque.addFirst(node.right);<br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-keyword">null</span>) deque.addFirst(node.left);<br>            &#125;<br>            res.add(temp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(n) </li></ul>]]></content>
    
    
    <categories>
      
      <category>JZOffer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>equals与hashcode</title>
    <link href="/2021/09/07/equals%E4%B8%8Ehashcode/"/>
    <url>/2021/09/07/equals%E4%B8%8Ehashcode/</url>
    
    <content type="html"><![CDATA[<h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>判断两个对象是否相等。</p><h4 id="Java-对-equals-的要求"><a href="#Java-对-equals-的要求" class="headerlink" title="Java 对 equals() 的要求"></a>Java 对 <code>equals()</code> 的要求</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自反性 </span><br>x.equals(x); <span class="hljs-comment">// true</span><br>  <br><span class="hljs-comment">// 对称性 </span><br>x.equals(y) == y.equals(x); <span class="hljs-comment">// true</span><br>  <br><span class="hljs-comment">// 传递性 </span><br><span class="hljs-keyword">if</span> (x.equals(y) &amp;&amp; y.equals(z))<br>    x.equals(z); <span class="hljs-comment">// true;</span><br>  <br><span class="hljs-comment">// 一致性 只要x和y内容一直不变 多次调用 equals() 方法结果不变 </span><br>x.equals(y) == x.equals(y); <span class="hljs-comment">// true</span><br>  <br><span class="hljs-comment">// 非空性 对任何不是 null 的对象 x 调用 x.equals(null) 结果都为 false </span><br>x.equals(<span class="hljs-keyword">null</span>); <span class="hljs-comment">// false;</span><br></code></pre></td></tr></table></figure><h3 id="和-equals-的区别"><a href="#和-equals-的区别" class="headerlink" title="== 和 equals() 的区别"></a>== 和 <code>equals()</code> 的区别</h3><p>==：对于基本数据类型，== 比较的是值；对于引用数据类型，== 比较的是对象的内存地址。即，判断两个对象<strong>是不是同一个对象</strong>。</p><p><code>equals()</code>：<strong>不能用于判断基本数据类型的变量</strong>，只能用来判断两个对象<strong>是否相等</strong>。</p><ul><li><p><code>equals()</code>方法存在于<code>Object</code>类中，而<code>Object</code>类是所有类的直接或间接父类。<code>Object</code> 类 <code>equals()</code> 方法（默认使用<code>Object</code>类的<code>equals()</code>方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>     <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span> == obj); <span class="hljs-comment">// 对于引用数据类型 比较的是对象的内存地址</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重写<code>equals()</code>方法：手动覆盖 <code>equals()</code>方法来比较两个对象是否等价，若相等则返回 true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 例：String类的equals方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object anObject)</span> </span>&#123;<br>    <span class="hljs-comment">// 如果是同一个对象返回true</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == anObject) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123;<br>        String anotherString = (String)anObject;<br>        <span class="hljs-keyword">int</span> n = value.length;<br>        <span class="hljs-keyword">if</span> (n == anotherString.value.length) &#123;<br>            <span class="hljs-keyword">char</span> v1[] = value;<br>            <span class="hljs-keyword">char</span> v2[] = anotherString.value;<br>            <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (n-- != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (v1[i] != v2[i])<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="Java只有值传递"><a href="#Java只有值传递" class="headerlink" title="Java只有值传递"></a>Java只有值传递</h4><p><a href="https://www.zhihu.com/question/31203609">Java 到底是值传递还是引用传递？ - 知乎 (zhihu.com)</a></p><p><strong>值传递</strong>：指在调用函数时<strong>将实际参数复制一份</strong>传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</p><p><strong>引用传递</strong>：指在调用函数时<strong>将实际参数的地址直接传递</strong>到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</p><p>值传递和引用传递的区别并不是传递的内容，而是<strong>实参</strong>到底有没有<strong>被复制</strong>一份给形参。</p><ul><li>只不过对于对象参数，复制的内容是对象的引用（对象的地址）。</li></ul><h2 id="hashcode"><a href="#hashcode" class="headerlink" title="hashcode"></a>hashcode</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p><code>hashCode()</code> 的作用是获取哈希码，也称为散列码；它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。</p><ul><li><p><code>hashCode()</code>定义在 JDK 的 <code>Object</code> 类中，这就意味着 Java 中的任何类都包含有 <code>hashCode()</code> 函数。</p></li><li><p>虽然每个Java类都包含<code>hashCode()</code> 函数，但是仅当使用散列表时（如<code>HashMap</code>），该类的<code>hashCode()</code>才有用，在散列表中<code>hashCode()</code> 的作用是获取对象的散列码，进而确定该对象在散列表中的位置。</p></li><li><p>另外需要注意的是： <code>Object</code> 的 <code>hashcode</code> 方法是本地方法，也就是用 c 语言或 c++ 实现的，该方法通常用来将对象的 内存地址 转换为整数之后返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure></li></ul><h3 id="为什么要有-hashCode-？"><a href="#为什么要有-hashCode-？" class="headerlink" title="为什么要有 hashCode ？"></a>为什么要有 <code>hashCode</code> ？</h3><p>简而言之，<code>hashcode</code> 只是用来<strong>缩小查找成本</strong>。</p><p>我们以“<code>HashSet</code> 如何检查重复”为例子来说明为什么要有 <code>hashCode</code> 。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210924002245.png" alt="《Head First Java》第二版 p561"></p><h3 id="为什么两个对象有相同的-hashcode-值，它们也不一定是相等的？"><a href="#为什么两个对象有相同的-hashcode-值，它们也不一定是相等的？" class="headerlink" title="为什么两个对象有相同的 hashcode 值，它们也不一定是相等的？"></a>为什么两个对象有相同的 <code>hashcode</code> 值，它们也不一定是相等的？</h3><p>简而言之，<code>hash</code> 算法不太行。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210924090203.png" alt="《Head First Java》第二版 p563"></p><h3 id="为什么重写-equals-时必须重写-hashCode-方法？"><a href="#为什么重写-equals-时必须重写-hashCode-方法？" class="headerlink" title="为什么重写 equals() 时必须重写 hashCode() 方法？"></a>为什么重写 <code>equals()</code> 时必须重写 <code>hashCode()</code> 方法？</h3><p><a href="https://www.cnblogs.com/skywang12345/p/3324958.html">第4部分 hashCode() 和 equals() 的关系</a></p><p>简单总结：如果不重写<code>hashCode()</code>方法，那么调用的仍是<code>Object</code>类的<code>hashCode()</code>方法，而<code>Object</code>类的<code>hashCode()</code>方法返回的<code>hash</code>值其实是对象的内存地址。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>TreeSet和TreeMap的应用</title>
    <link href="/2021/09/02/TreeSet%E5%92%8CTreeMap%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2021/09/02/TreeSet%E5%92%8CTreeMap%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="非平衡二叉搜索树的缺点"><a href="#非平衡二叉搜索树的缺点" class="headerlink" title="非平衡二叉搜索树的缺点"></a>非平衡二叉搜索树的缺点</h3><p>二叉搜索树是一种很有用的数据结构。如果二叉搜索树有n个节点，深度为h，那么查找、添加和删除操作的时间复杂度都是O（h）。如果二叉搜索树是平衡的，那么深度h近似等于logn。但在极端情况下（如每个节点只有一个子节点），树的深度h等于n-1，此时二叉搜索树的查找、添加和删除操作的时间复杂度都退化成O（n）。二叉搜索树是否平衡对二叉搜索树的时间效率至关重要。</p><h3 id="平衡的二叉搜索树"><a href="#平衡的二叉搜索树" class="headerlink" title="平衡的二叉搜索树"></a>平衡的二叉搜索树</h3><p>Java根据红黑树这种<strong>平衡的二叉搜索树</strong>实现TreeSet和TreeMap两种数据结构，如果应聘者在面试的时候需要使用平衡的二叉树来高效地解决问题，则可以直接引用。</p><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><p>TreeSet实现了接口Set，它内部的平衡二叉树中的<strong>每个节点只包含一个值</strong>，根据这个值的查找、添加和删除操作的时间复杂度都是O（logn）。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210902091450.png" alt="TreeSet的常用函数"></p><h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h4><p>TreeMap实现了接口Map，它内部的平衡二叉搜索树中的<strong>每个节点都是一个包含键值和值的映射</strong>。可以根据键值实现时间复杂度为O（logn）的查找、添加和删除操作。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210902091552.png" alt="TreeMap的常用函数"></p><h3 id="动态数据集合实现快速查找"><a href="#动态数据集合实现快速查找" class="headerlink" title="动态数据集合实现快速查找"></a>动态数据集合实现快速查找</h3><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>哈希表（HashSet或HashMap）中查找、添加和删除操作的时间复杂度都是O（1），是非常高效的。但它有一个缺点，<strong>哈希表只能根据键进行查找，只能判断该键是否存在</strong>。如果需要根据数值的大小查找，如查找数据集合中比某个值大的所有数字中的最小的一个，哈希表就无能为力。</p><h4 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h4><p>如果在一个排序的动态数组（如Java的ArrayList）中根据数值的大小进行查找，则可以应用二分查找算法实现时间效率为O（logn）的查找。但<strong>排序的动态数组的添加和删除操作的时间复杂度是O（n）</strong>。</p><h4 id="TreeSet-or-TreeMap"><a href="#TreeSet-or-TreeMap" class="headerlink" title="TreeSet or TreeMap"></a>TreeSet or TreeMap</h4><p>由于TreeSet或TreeMap能够保证其内部的二叉搜索树是平衡的，因此它们的查找、添加和删除操作的时间复杂度都是O（logn），综合来看它们比动态排序数组更加高效。</p><h3 id="1-值和下标之差都在给定的范围内"><a href="#1-值和下标之差都在给定的范围内" class="headerlink" title="1. 值和下标之差都在给定的范围内"></a>1. 值和下标之差都在给定的范围内</h3><p>给定一个整数数组nums和两个正数k、t，请判断是否存在两个不同的下标i和j满足i和j之差的绝对值不大于给定的k，并且两个数值nums[i]和nums[j]的差的绝对值不大于给定的t。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsNearbyAlmostDuplicate</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>        <span class="hljs-comment">// 大小为k 保证abs(i - j) &lt;= k</span><br>        TreeSet&lt;Long&gt; set = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-comment">// 2. floor(): 得到&lt;= nums[i]的最大值</span><br>            Long lower = set.floor((<span class="hljs-keyword">long</span>)nums[i]);<br>            <span class="hljs-keyword">if</span>(lower != <span class="hljs-keyword">null</span> &amp;&amp; Math.abs((<span class="hljs-keyword">long</span>)nums[i] - lower) &lt;= t) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>            <span class="hljs-comment">// 3. ceiling(): 得到&gt;= nums[i]的最小值</span><br>            Long upper = set.ceiling((<span class="hljs-keyword">long</span>)nums[i]);<br>            <span class="hljs-keyword">if</span>(upper != <span class="hljs-keyword">null</span> &amp;&amp; Math.abs((<span class="hljs-keyword">long</span>)nums[i] - upper) &lt;= t) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>            <span class="hljs-comment">// 1. 加入数字 判断set是否“溢出”</span><br>            set.add((<span class="hljs-keyword">long</span>)nums[i]);<br>            <span class="hljs-keyword">if</span>(i &gt;= k) &#123;<br>                set.remove((<span class="hljs-keyword">long</span>)nums[i - k]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="错误示范"><a href="#错误示范" class="headerlink" title="错误示范"></a>错误示范</h4><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210902113433.png"></p><h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n*logk) <ul><li>TreeSet查找、添加和删除操作的时间复杂度都是O(logk)，对于一个长度为n的数组而言，它的时间复杂度是O(n*logk) </li></ul></li><li>空间复杂度：O(k) <ul><li>TreeSet大小是k</li></ul></li></ul><h3 id="2-日程表"><a href="#2-日程表" class="headerlink" title="2. 日程表"></a>2. 日程表</h3><p>请实现一个类型MyCalendar用来记录自己的日程安排，该类型用方法book（int start，int end）在日程表中添加一个时间区域为[start，end）的事项。如果[start，end）中之前没有安排其他事项，则成功添加该事项并返回true；否则，不能添加该事项，并返回false。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li>在TreeMap中，每个节点是一个映射，可以把时间区间的开始时间作为映射的键，把结束时间作为映射的值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCalendar</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> TreeMap&lt;Integer, Integer&gt; events;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyCalendar</span><span class="hljs-params">()</span> </span>&#123;<br>        events = <span class="hljs-keyword">new</span> TreeMap&lt;&gt;();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">book</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br>        <span class="hljs-comment">// 查找小于当前start的最大键 判断start是否在该键后面（不重叠）</span><br>        Integer left = events.floorKey(start);<br>        <span class="hljs-comment">// 查找大于当前start的最小键 判断start是否在该键前面（不重叠）</span><br>        Integer right = events.ceilingKey(start);<br>        <span class="hljs-keyword">if</span>((left != <span class="hljs-keyword">null</span> &amp;&amp; events.get(left) &gt; start) || (right != <span class="hljs-keyword">null</span> &amp;&amp; right &lt; end)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        events.put(start, end);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(logn)</li><li>空间复杂度：O(n)</li></ul><p>参考：剑指Offer（专项突破版）</p>]]></content>
    
    
    <categories>
      
      <category>JZOffer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git常用命令</title>
    <link href="/2021/08/30/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/08/30/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init <span class="hljs-comment"># 初始化本地库</span><br>git status <span class="hljs-comment"># 查看本地库状态</span><br>git add 文件名 <span class="hljs-comment"># 添加暂存区</span><br>git commit -m <span class="hljs-string">&quot;日志信息&quot;</span> <span class="hljs-comment"># 提交本地库</span><br></code></pre></td></tr></table></figure><h3 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reflog <span class="hljs-comment"># 查看版本信息</span><br>git <span class="hljs-built_in">log</span> <span class="hljs-comment"># 查看版本详细信息</span><br>git reset --hard 版本号 <span class="hljs-comment"># 版本穿梭</span><br></code></pre></td></tr></table></figure><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -v <span class="hljs-comment"># 查看分支</span><br>git branch 分支名 <span class="hljs-comment"># 创建分支</span><br>git checkout 分支名 <span class="hljs-comment"># 切换分支</span><br>git merge 分支名 <span class="hljs-comment"># 把指定的分支合并到当前分支上</span><br></code></pre></td></tr></table></figure><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210828205527.png"></p><h4 id="分支冲突"><a href="#分支冲突" class="headerlink" title="分支冲突"></a>分支冲突</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status <span class="hljs-comment"># 查看本地库状态 定位冲突文件</span><br><span class="hljs-comment"># 特殊符号: &lt;&lt;&lt;&lt;&lt;&lt;&lt; 当前分支 当前分支的代码 ======= 合并过来的代码 &gt;&gt;&gt;&gt;&gt;&gt;&gt; 其他分支</span><br><span class="hljs-comment"># 编辑有冲突的文件 删除特殊符号</span><br>git add<br>git commit -m <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure><h3 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add 别名 远程地址 <span class="hljs-comment"># 起别名 eg. git remote add origin 远程地址</span><br>git remote -v <span class="hljs-comment"># 查看当前所有远程地址别名</span><br>git <span class="hljs-built_in">clone</span> 远程地址<br>git pull 别名 远程分支名 <span class="hljs-comment"># 将远程仓库对应分支最新内容拉下来后与当前本地分支直接合并</span><br>git push 别名 本地分支名:远程分支名 <span class="hljs-comment"># 若如果本地分支名与远程分支名相同 则可以省略冒号和远程分支名</span><br></code></pre></td></tr></table></figure><h4 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin main <span class="hljs-comment"># 将远程仓库里面的项目拉下来</span><br>dir <span class="hljs-comment"># 查看有哪些文件夹</span><br>git rm -r --cached .idea <span class="hljs-comment"># 删除.idea文件夹</span><br>git commit -m <span class="hljs-string">&#x27;delete .idea&#x27;</span> <span class="hljs-comment"># 提交 添加操作说明</span><br>git push origin main <span class="hljs-comment"># 将本次更改更新到github项目上去</span><br></code></pre></td></tr></table></figure><h3 id="IDEA-集成-Git"><a href="#IDEA-集成-Git" class="headerlink" title="IDEA 集成 Git"></a>IDEA 集成 Git</h3><h4 id="配置-Git-忽略文件"><a href="#配置-Git-忽略文件" class="headerlink" title="配置 Git 忽略文件"></a>配置 Git 忽略文件</h4><p>为什么要忽略他们？ </p><ul><li>与项目的实际功能无关，不参与服务器上部署运行，把它们忽略掉能够屏蔽 IDE 工具之间的差异</li></ul><p>怎么忽略？</p><ol><li><p>创建git.ignore文件</p><ul><li><p>这个文件的存放位置原则上在哪里都可以，为了便于让~/.gitconfig 文件引用，建议也放在用户家目录下</p></li><li><p>git.ignore 文件模版内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Compiled class file</span><br>*.class<br><span class="hljs-comment"># Log file</span><br>*.<span class="hljs-built_in">log</span><br><span class="hljs-comment"># BlueJ files</span><br>*.ctxt<br><span class="hljs-comment"># Mobile Tools for Java (J2ME)</span><br>.mtj.tmp/<br><span class="hljs-comment"># Package Files #</span><br>*.jar<br>*.war<br>*.nar<br>*.ear<br>*.zip<br>*.tar.gz<br>*.rar<br><span class="hljs-comment"># virtual machine crash logs, see </span><br>http://www.java.com/en/download/<span class="hljs-built_in">help</span>/error_hotspot.xml<br>hs_err_pid*<br>.classpath<br>.project<br>.settings<br>target<br>.idea<br>*.iml<br></code></pre></td></tr></table></figure></li></ul></li><li><p>在.gitconfig 文件中引用忽略配置文件</p><p>注意：这里要使用“正斜线（/）”，不要使用“反斜线（\）”</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[core]</span><br><span class="hljs-attr">excludesfile</span> = C:/Users/robin/git.ignore<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的DFS</title>
    <link href="/2021/08/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84DFS/"/>
    <url>/2021/08/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84DFS/</url>
    
    <content type="html"><![CDATA[<h3 id="1-二叉树剪枝"><a href="#1-二叉树剪枝" class="headerlink" title="1. 二叉树剪枝"></a>1. 二叉树剪枝</h3><p>一棵二叉树的所有节点的值要么是0要么是1，请剪除该二叉树中所有节点的值全都是0的子树。例如，在剪除图8.2（a）中二叉树中所有节点值都为0的子树之后的结果如图8.2（b）所示。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210826180113.png"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li>后序遍历最适合用来解决这个问题。每遍历到一个节点，就要确定它是否有左右子树，<strong>如果左右子树都是空的，并且节点的值是0，那么就可以删除这个节点</strong>。</li><li>所谓删除一个节点，就是<strong>返回null给它的父节点</strong>，这样这个节点就从这棵二叉树中消失。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest.Tree_DFS;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pruneTree</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">pruneTree</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> root;<br><br>        root.left = pruneTree(root.left);<br>        root.right = pruneTree(root.right);<br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-keyword">null</span> &amp;&amp; root.right == <span class="hljs-keyword">null</span> &amp;&amp; root.val == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        pruneTree pruneTree = <span class="hljs-keyword">new</span> pruneTree();<br>        <span class="hljs-comment">// [1,0,1,0,0,0,1]</span><br>        TreeNode treeNode = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">1</span>);<br>        treeNode.left = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">0</span>);<br>        treeNode.right = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">1</span>);<br>        treeNode.left.left = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">0</span>);<br>        treeNode.left.right = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">0</span>);<br>        treeNode.right.left = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">0</span>);<br>        treeNode.right.right = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">1</span>);<br><br>        TreeNode res = pruneTree.pruneTree(treeNode);<br>        System.out.println(res.toString()); <span class="hljs-comment">// [1,null,1,null,1]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(h) h为树高</li></ul><h3 id="2-序列化和反序列化二叉树"><a href="#2-序列化和反序列化二叉树" class="headerlink" title="2. 序列化和反序列化二叉树"></a>2. 序列化和反序列化二叉树</h3><p>请设计一个算法将二叉树序列化成一个字符串，并能将该字符串反序列化出原来二叉树的算法。</p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><ul><li>先考虑如何将二叉树序列化为一个字符串。需要逐个遍历二叉树的每个节点，每遍历到一个节点就将节点的值序列化到字符串中。以<strong>前序遍历的顺序遍历二叉树最适合序列化</strong>。<strong>这样做的好处是在反序列化时最方便，从字符串中读出的第1个数值一定是根节点的值</strong>。</li><li>只把节点的值序列化到字符串中是不够的。首先，要用一个分隔符（如逗号）把不同的节点分隔开。其次，还要考虑如何才能在反序列化的时候构建不同结构的二叉树（即，空为”#“，保持结构）。</li><li>我们需要一个下标去扫描字符串数组nodeStrs中的每个字符串。通常用一个整数值来表示数组的下标，但在上述代码中却定义了一个长度为1的整数数组i。这是因为递归函数dfs每反序列化一个节点时下标就会增加1，并且函数的调用者需要知道下标增加了。如果函数dfs的第2个参数i是整数类型，那么即使在函数体内修改i的值，修改之后的值也不能传递给它的调用者。但把i定义为整数数组之后，可以修改整数数组中的数字，修改之后的数值就能传给它的调用者。<ul><li><strong>基本数据类型：值传递（传递拷贝 原值不变）</strong></li><li><strong>对象类型：引用传递（传递地址 修改原值）</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest.Tree_DFS;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">serialize_deserialize</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">serialize</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;#&quot;</span>;<br><br>        String left = serialize(root.left);<br>        String right = serialize(root.right);<br>        <span class="hljs-keyword">return</span> String.valueOf(root.val) + <span class="hljs-string">&quot;,&quot;</span> + left + <span class="hljs-string">&quot;,&quot;</span> + right;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">deserialize</span><span class="hljs-params">(String data)</span> </span>&#123;<br>        String[] nodeStrs = data.split(<span class="hljs-string">&quot;,&quot;</span>); <span class="hljs-comment">// 分隔之后的所有节点</span><br>        <span class="hljs-keyword">int</span>[] i = &#123;<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// 若传递整型 修改后调用者接收不到 值传递（传递拷贝 原值不变）</span><br>        <span class="hljs-keyword">return</span> dfs(nodeStrs, i);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> TreeNode <span class="hljs-title">dfs</span><span class="hljs-params">(String[] strs, <span class="hljs-keyword">int</span>[] i)</span> </span>&#123;<br>        String str = strs[i[<span class="hljs-number">0</span>]]; <span class="hljs-comment">// 只有一个值</span><br>        i[<span class="hljs-number">0</span>]++; <span class="hljs-comment">// 数组值+1 引用传递（传递地址 修改原值）</span><br><br>        <span class="hljs-keyword">if</span> (str.equals(<span class="hljs-string">&quot;#&quot;</span>)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br><br>        TreeNode node = <span class="hljs-keyword">new</span> TreeNode(Integer.valueOf(str));<br>        node.left = dfs(strs, i);<br>        node.right = dfs(strs, i);<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n) 只访问每个节点一次</li><li>空间复杂度：O(n)  递归使用的栈空间</li></ul><h3 id="3-从根节点到叶节点的路径数字之和"><a href="#3-从根节点到叶节点的路径数字之和" class="headerlink" title="3. 从根节点到叶节点的路径数字之和"></a>3. 从根节点到叶节点的路径数字之和</h3><p>在一棵二叉树中所有节点都在0～9的范围之内，从根节点到叶节点的路径表示一个数字。求二叉树中所有路径表示的数字之和。例如，图中的二叉树有3条从根节点到叶节点的路径，它们分别表示数字395、391和302，这3个数字之和是1088。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210826214110.png"></p><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><ul><li>首先考虑<strong>如何计算路径表示的数字</strong>。顺着指向子节点的指针路径向下遍历二叉树，每到达一个节点，相当于在路径表示的数字末尾添加一位数字。例如，在最开始到达根节点时，它表示数字3。然后到达节点9，此时路径表示数字39（3×10+9=39）。然后向下到达节点5，此时路径表示数字395（39×10+5=395）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest.Tree_DFS;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sumNumbers</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sumNumbers</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> dfs(root, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> path)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <br>        path = path * <span class="hljs-number">10</span> + root.val;<br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-keyword">null</span> &amp;&amp; root.right == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> path;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dfs(root.left, path) + dfs(root.right, path);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n) 前序遍历</li><li>空间复杂度：O(1)  path</li></ul><h3 id="4-向下的路径节点值之和"><a href="#4-向下的路径节点值之和" class="headerlink" title="4. 向下的路径节点值之和"></a>4. 向下的路径节点值之和</h3><p>给定一棵二叉树和一个值sum，求二叉树中节点值之和等于sum的路径的数目。路径的定义为二叉树中顺着指向子节点的指针向下移动所经过的节点，但不一定从根节点开始，也不一定到叶节点结束。例如，在如图所示中的二叉树中有两条路径的节点值之和等于8，其中，第1条路径从节点5开始经过节点2到达节点1，第2条路径从节点2开始到节点6。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210826215743.png"></p><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><ul><li><p>在这个题目中，二叉树的路径的定义发生了改变，它<strong>不一定从根节点开始，也不一定到叶节点结束</strong>。路径的起止节点的不确定性给计算路径经过的节点值之和带来了很大的难度。</p></li><li><p>如果在路径上移动时把所有累加的节点值之和都保存下来，就容易知道是否存在从任意节点出发的值为给定sum的路径。</p><ul><li>例如，当到达图中二叉树的根节点5时，从根节点开始的路径节点值之和是5。当到达节点2时，从根节点开始的路径经过的节点值之和是7。当到达节点6时，从根节点出发到当前节点的路径经过的节点值之和为13。由于要找出节点值之和为8的路径，而13与5的差值是8，这就说明从节点5的下一个节点（即节点2）开始到节点6结束的路径经过的节点值之和为8。</li></ul></li><li><p>可以采用二叉树深度优先搜索来解决与路径相关的问题。<strong>当遍历到一个节点时，先累加从根节点开始的路径上的节点值之和，再计算到它的左右子节点的路径的节点值之和</strong>。这就是典型的前序遍历的顺序。</p><ul><li>用参数path表示从根节点开始的路径已经累加的节点值之和，并保存到哈希表map中。哈希表的键是累加的节点值之和，哈希表的值是每个节点值之和出现的次数。当遍历到一个节点时，就把当前的节点值累加到参数path。如果这个和之前出现过，则将出现的次数加1；如果这个和之前没有出现过，那么这是它第1次出现。然后更新哈希表map保存累加节点值之和path及出现的次数。</li><li>辅助函数dfs实现了递归的前序遍历，该函数遍历到二叉树的一个节点时将递归地遍历它的子节点。因此，<strong>当该函数结束时，程序将回到节点的父节点</strong>，也就是说，<strong>在函数结束之前需要将当前节点从路径中删除，从根节点到当前节点累加的节点值之和也要从哈希表map中删除</strong>。这是在函数dfs返回之前更新哈希表map把参数path出现的次数减1的原因。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest.Tree_DFS;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pathNum</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pathNum</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> sum)</span> </span>&#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// path - sum == 0 -&gt; path == sum 初始为1</span><br>        <span class="hljs-keyword">return</span> dfs(root, sum, map, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> sum, Map&lt;Integer, Integer&gt; map, <span class="hljs-keyword">int</span> path)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        path += root.val;<br>        <span class="hljs-comment">// 若 path - sum 差值不在map中 则返回 0</span><br>        <span class="hljs-comment">// 若 path - sum 差值在map中 则获取次数 在这个次数基础上递归左右子树</span><br>        <span class="hljs-comment">// 若 path - sum == 0 -&gt; path == sum 初始map.put(0, 1); 值为1</span><br>        <span class="hljs-keyword">int</span> count = map.getOrDefault(path - sum, <span class="hljs-number">0</span>); <br>        <span class="hljs-comment">// 如果这个和之前出现过 则在原有次数上+1 </span><br>        <span class="hljs-comment">// 若没出现过 则0+1 表示第一次出现</span><br>        map.put(path, map.getOrDefault(path, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br><br>        count += dfs(root.left, sum, map, path);<br>        count += dfs(root.right, sum, map, path);<br><br>        <span class="hljs-comment">// 在函数结束之前需要将当前节点从路径中删除</span><br>        <span class="hljs-comment">// 从根节点到当前节点累加的节点值之和也要从哈希表map中删除</span><br>        map.put(path, map.get(path) - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n) 前序遍历</li><li>空间复杂度：O(n)  HashMap</li></ul><h3 id="5-节点值之和最大的路径"><a href="#5-节点值之和最大的路径" class="headerlink" title="5. 节点值之和最大的路径"></a>5. 节点值之和最大的路径</h3><p>在二叉树中将路径定义为顺着节点之间的连接<strong>从任意一个节点开始到达任意一个节点所经过的所有节点</strong>。路径中至少包含一个节点，不一定经过二叉树的根节点，也不一定经过叶节点。给定非空的一棵二叉树，请求出二叉树所有路径上节点值之和的最大值。例如，在如图8.6所示的二叉树中，从节点15开始经过节点20到达节点7的路径的节点值之和为42，是节点值之和最大的路径。</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210827212711.png"></p><h4 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h4><ul><li>这个题目中二叉树路径的定义又和前面的不同。这里的路径最主要的特点是<strong>路径有可能同时经过一个节点的左右子节点</strong>。<ul><li>例如，在图中，一条路径可以经过节点-9、节点20、节点15和节点-3；一条路径也可以经过节点15、节点20和节点7。</li></ul></li><li>值得注意的是，如果一条路径同时经过某个节点的左右子节点，那么该路径一定不能经过它的父节点。<ul><li>例如，在图中，经过节点20、节点15、节点7的路径不能经过节点-9。</li></ul></li><li>对于任意一个节点，如果最大和路径包含该节点，那么只可能是两种情况：<ol><li>其左右子树中所构成的和路径值较大的那个加上该节点的值后向父节点回溯构成最大路径</li><li>左右子树都在最大路径中，加上该节点的值构成了最终的最大路径</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest.Tree_DFS;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">maxPathSum</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSum = Integer.MIN_VALUE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxPathSum</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        dfs(root);<br>        <span class="hljs-keyword">return</span> maxSum;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 如果子树路径和为负则置0 表示最大路径不包含该子树</span><br>        <span class="hljs-keyword">int</span> left = Math.max(<span class="hljs-number">0</span>, dfs(root.left));<br>        <span class="hljs-keyword">int</span> right = Math.max(<span class="hljs-number">0</span>, dfs(root.right));<br>        <span class="hljs-comment">// maxSum可能为 左+根 右+根 左+右+根</span><br>        maxSum = Math.max(maxSum, root.val + left + right);<br><br>        <span class="hljs-comment">// 回溯父节点继续比较</span><br>        <span class="hljs-comment">// 由于同时经过左右子树的路径不能经过父节点</span><br>        <span class="hljs-comment">// 因此返回值是变量left与right的较大值加上当前节点root的值</span><br>        <span class="hljs-keyword">return</span> root.val + Math.max(left, right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度-4"><a href="#复杂度-4" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n) 后序遍历</li><li>空间复杂度：O(1)  maxSum</li></ul><p>参考：剑指Offer（专项突破版）</p>]]></content>
    
    
    <categories>
      
      <category>JZOffer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的前中后序遍历 递归or迭代</title>
    <link href="/2021/08/26/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%20%E9%80%92%E5%BD%92or%E8%BF%AD%E4%BB%A3/"/>
    <url>/2021/08/26/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%20%E9%80%92%E5%BD%92or%E8%BF%AD%E4%BB%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="前序遍历（根左右）"><a href="#前序遍历（根左右）" class="headerlink" title="前序遍历（根左右）"></a>前序遍历（根左右）</h3><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    List&lt;Integer&gt; nodes = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    dfs(root, nodes);<br>    <span class="hljs-keyword">return</span> nodes;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; nodes)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>        nodes.add(root.val);<br>        dfs(root.left, nodes);<br>        dfs(root.right, nodes);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    List&lt;Integer&gt; result = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    TreeNode cur = root;<br><br>    <span class="hljs-comment">// cur != null 继续压栈左子树</span><br>    <span class="hljs-comment">// cur == null 但 !stack.isEmpty() 出栈 压右子树</span><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span> || !stack.isEmpty()) &#123;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>            result.add(cur.val);<br>            stack.push(cur);<br>            cur = cur.left;<br>        &#125;<br>        cur = stack.pop();<br>        cur = cur.right;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中序遍历（左根右）"><a href="#中序遍历（左根右）" class="headerlink" title="中序遍历（左根右）"></a>中序遍历（左根右）</h3><h4 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    List&lt;Integer&gt; nodes = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    dfs(root, nodes);<br>    <span class="hljs-keyword">return</span> nodes;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; nodes)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>        dfs(root.left, nodes);<br>        nodes.add(root.val);<br>        dfs(root.right, nodes);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="迭代-1"><a href="#迭代-1" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    List&lt;Integer&gt; result = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    TreeNode cur = root;<br><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span> || !stack.isEmpty()) &#123;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>            stack.push(cur);<br>            cur = cur.left;<br>        &#125;<br>        cur = stack.pop();<br>        <span class="hljs-comment">// 左子树压栈完毕 放入结果列表</span><br>        result.add(cur.val);<br>        cur = cur.right;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后序遍历（左右根）"><a href="#后序遍历（左右根）" class="headerlink" title="后序遍历（左右根）"></a>后序遍历（左右根）</h3><h4 id="递归-2"><a href="#递归-2" class="headerlink" title="递归"></a>递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    List&lt;Integer&gt; nodes = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    dfs(root, nodes);<br>    <span class="hljs-keyword">return</span> nodes;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; nodes)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>        dfs(root.left, nodes);<br>        dfs(root.right, nodes);<br>        nodes.add(root.val);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="迭代-2"><a href="#迭代-2" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    List&lt;Integer&gt; result = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    TreeNode cur = root;<br>    TreeNode prev = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 记录上一个被遍历的节点 用来判断当前节点右子树是否被遍历</span><br><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span> || !stack.isEmpty()) &#123;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// cur = null; 不需再次压栈</span><br>            stack.push(cur);<br>            cur = cur.left;<br>        &#125;<br><br>        cur = stack.peek();<br>        <span class="hljs-keyword">if</span> (cur.right != <span class="hljs-keyword">null</span> &amp;&amp; cur.right != prev) &#123;<br>            <span class="hljs-comment">// 未遍历右子树 进行遍历</span><br>            cur = cur.right;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            stack.pop();<br>            <span class="hljs-comment">// 已遍历右子树 当前节点加入结果链表</span><br>            result.add(cur.val);<br>            prev = cur;<br>            cur = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 右子树之后是它的父节点 已存在栈中 不需再次压栈</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JZOffer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>双指针之数组</title>
    <link href="/2021/08/25/%E5%8F%8C%E6%8C%87%E9%92%88%E4%B9%8B%E6%95%B0%E7%BB%84/"/>
    <url>/2021/08/25/%E5%8F%8C%E6%8C%87%E9%92%88%E4%B9%8B%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>方向相反</strong>的双指针经常用来求<strong>排序数组中的 两个数字 之和</strong>。</p><blockquote><p>一个指针P1指向数组的第1个数字，另一个指针P2指向数组的最后一个数字，然后比较两个指针指向的数字之和及一个目标值。如果两个指针指向的数字之和大于目标值，则向左移动指针P2；如果两个指针指向的数字之和小于目标值，则向右移动指针P1。此时两个指针的移动方向是相反的。</p></blockquote><p><strong>方向相同</strong>的双指针通常用来求<strong>正数数组中 子数组 的和或乘积</strong>。</p><blockquote><p>初始化的时候两个指针P1和P2都指向数组的第1个数字。如果两个指针之间的子数组的和或乘积大于目标值，则向右移动指针P1删除子数组最左边的数字；如果两个指针之间的子数组的和或乘积小于目标值，则向右移动指针P2在子数组的右边增加新的数字。此时两个指针的移动方向是相同的。</p></blockquote><h3 id="1-排序数组中的两个数字之和"><a href="#1-排序数组中的两个数字之和" class="headerlink" title="1. 排序数组中的两个数字之和"></a>1. 排序数组中的两个数字之和</h3><p>输入一个递增排序的数组和一个值k，请问如何在数组中找出两个和为k的数字并返回它们的下标？假设数组中存在且只存在一对符合条件的数字，同时一个数字不能使用两次。例如，输入数组[1，2，4，6，10]，k的值为8，数组中的数字2与6的和为8，它们的下标分别为1与3。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">twoSum</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] numbers, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> j = numbers.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; numbers[i] + numbers[j] != target) &#123;<br>            <span class="hljs-keyword">if</span> (numbers[i] + numbers[j] &lt; target) i++;<br>            <span class="hljs-keyword">else</span> j--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;i, j&#125;;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        twoSum test = <span class="hljs-keyword">new</span> twoSum();<br>        <span class="hljs-keyword">int</span>[] twoSum = test.twoSum(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;, <span class="hljs-number">3</span>);<br>        System.out.println(Arrays.toString(twoSum)); <span class="hljs-comment">// [0, 1]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><h3 id="2-数组中和为0的3个数字"><a href="#2-数组中和为0的3个数字" class="headerlink" title="2. 数组中和为0的3个数字"></a>2. 数组中和为0的3个数字</h3><p>输入一个数组，如何找出数组中所有和为0的3个数字的三元组？需要注意的是，返回值中不得包含重复的三元组。例如，在数组[-1，0，1，2，-1，-4]中有两个三元组的和为0，它们分别是[-1，0，1]和[-1，-1，2]。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li>先对数组排序，然后就可以<strong>先固定一个数字i，再在排序数组中查找和为-i的两个数字</strong>。我们已经有了用O（n）时间在排序数组中找出和为给定值的两个数字的方法，由于需要固定数组中的每个数字，因此查找三元组的时间复杂度是O(n^2)。</li><li>如何去除重复的三元组？前面提到需要使用两个指针来找出和为给定值的两个数字。在找到一个和为0的三元组之后，就需要移动这两个指针，以便找出其他符合条件的三元组。<strong>在移动指针的时候需要跳过所有相同的值，以便过滤掉重复的三元组。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">threeSum</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="hljs-keyword">int</span>[] nums) &#123;<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (nums.length &gt;= <span class="hljs-number">3</span>) &#123;<br>            Arrays.sort(nums); <span class="hljs-comment">// 先排序</span><br>            <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (i &lt; nums.length - <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">// 预留2个位置给j,k</span><br>                twoSum(nums, i, res);<br>                <span class="hljs-keyword">int</span> temp = nums[i];<br>                <span class="hljs-keyword">while</span> (i &lt; nums.length &amp;&amp; nums[i] == temp) &#123; <span class="hljs-comment">// 避免重复</span><br>                    i++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-comment">// 在固定变量i指向的数字之后</span><br>    <span class="hljs-comment">// 函数twoSum在排序后的数组中找出所有下标大于i并且和为-nums[i]的两个数字</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, List&lt;List&lt;Integer&gt;&gt; res)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; <span class="hljs-comment">// start</span><br>        <span class="hljs-keyword">int</span> k = nums.length - <span class="hljs-number">1</span>; <span class="hljs-comment">// end</span><br>        <span class="hljs-keyword">while</span> (j &lt; k) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] + nums[j] + nums[k] == <span class="hljs-number">0</span>) &#123;<br>                res.add(Arrays.asList(nums[i], nums[j], nums[k]));<br>                <span class="hljs-keyword">int</span> temp = nums[j];<br>                <span class="hljs-keyword">while</span> (nums[j] == temp &amp;&amp; j &lt; k) &#123; <span class="hljs-comment">// 避免重复</span><br>                    j++;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i] + nums[j] + nums[k] &lt; <span class="hljs-number">0</span>) &#123;<br>                j++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                k--;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        threeSum threeSum = <span class="hljs-keyword">new</span> threeSum();<br>        List&lt;List&lt;Integer&gt;&gt; lists = threeSum.threeSum(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">4</span>&#125;);<br>        System.out.println(lists); <span class="hljs-comment">// [[-1, -1, 2], [-1, 0, 1]]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n^2)</li></ul><h3 id="3-和大于或等于k的最短子数组"><a href="#3-和大于或等于k的最短子数组" class="headerlink" title="3. 和大于或等于k的最短子数组"></a>3. 和大于或等于k的最短子数组</h3><p>输入一个正整数组成的数组和一个正整数k，请问数组中和大于或等于k的连续子数组的最短长度是多少？如果不存在所有数字之和大于或等于k的子数组，则返回0。例如，输入数组[5，1，4，3]，k的值为7，和大于或等于7的最短连续子数组是[4，3]，因此输出它的长度2。</p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><ul><li><strong>指针P1和P2初始化的时候都指向数组的第1个元素。</strong>当指针P1和P2之间的子数组数字之和小于k时，向右移动指针P2，直到两个指针之间的子数组数字之和大于k，否则向右移动指针P1，直到两个指针之间的子数组数字之和小于k。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">minSubArrayLen</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> minLen = Integer.MAX_VALUE;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>; right &lt; nums.length; right++) &#123;<br>            sum += nums[right];<br>            <span class="hljs-keyword">while</span> (left &lt;= right &amp;&amp; sum &gt;= k) &#123;<br>                minLen = Math.min(minLen, right - left + <span class="hljs-number">1</span>);<br>                sum -= nums[left++]; <span class="hljs-comment">// 先用再加</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> minLen;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        minSubArrayLen minSubArrayLen = <span class="hljs-keyword">new</span> minSubArrayLen();<br>        <span class="hljs-keyword">int</span> i = minSubArrayLen.minSubArrayLen(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>&#125;, <span class="hljs-number">7</span>);<br>        System.out.println(i); <span class="hljs-comment">// 2</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li><p>时间复杂度：O(n)</p><p>假设数组的长度为n，尽管上述代码中有两个嵌套的循环，该解法的时间复杂度仍然是O(n)。这是因为在这两个循环中，<strong>变量left和right都是只增加不减少（从头到尾走一遍）</strong>，变量right从0增加到n-1，变量left从0最多增加到n-1，因此总的执行次数是O(n)。</p></li></ul><h3 id="4-乘积小于k的子数组"><a href="#4-乘积小于k的子数组" class="headerlink" title="4. 乘积小于k的子数组"></a>4. 乘积小于k的子数组</h3><p>输入一个由正整数组成的数组和一个正整数k，请问数组中有多少个数字乘积小于k的连续子数组？例如，输入数组[10，5，2，6]，k的值为100，有8个子数组的所有数字的乘积小于100，它们分别是[10]、[5]、[2]、[6]、[10，5]、[5，2]、[2，6]和[5，2，6]。</p><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><ul><li>由于我们的目标是求出所有数字乘积小于k的子数组的个数，一旦向右移动指针P1到某个位置时子数组的乘积小于k，就不需要再向右移动指针P1。这是因为只要保持指针P2不动，向右移动指针P1形成的所有子数组的数字乘积就一定小于k。此时<strong>两个指针之间有多少个数字，就找到了多少个数字乘积小于k的子数组</strong>。</li><li>解释：其中以r结尾的满足条件的子数组共有r-l+1个，他们是：[l…r],[l+1…r]…[r-1,r],[r]。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JZOfferTest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">numSubarrayProductLessThanK</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numSubarrayProductLessThanK</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> product = <span class="hljs-number">1</span>; <span class="hljs-comment">// 乘积初始值</span><br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>; right &lt; nums.length; right++) &#123;<br>            product *= nums[right];<br>            <span class="hljs-keyword">while</span> (left &lt;= right &amp;&amp; product &gt;= k) &#123;<br>                product /= nums[left++]; <span class="hljs-comment">// 先除后右移</span><br>            &#125;<br>            count += right - left + <span class="hljs-number">1</span>; <br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        numSubarrayProductLessThanK test = <span class="hljs-keyword">new</span> numSubarrayProductLessThanK();<br>        <span class="hljs-keyword">int</span> i = test.numSubarrayProductLessThanK(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>&#125;, <span class="hljs-number">100</span>);<br>        System.out.println(i); <span class="hljs-comment">// 8</span><br>        <span class="hljs-comment">// 10: 1</span><br>        <span class="hljs-comment">// 10,5: 2</span><br>        <span class="hljs-comment">// 5,2: 2</span><br>        <span class="hljs-comment">// 5,2,6: 3</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h4><ul><li>时间复杂度：O(n)</li></ul><p>参考：剑指Offer（专项突破版）</p>]]></content>
    
    
    <categories>
      
      <category>JZOffer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>统计salary的累计和（窗口函数的使用）</title>
    <link href="/2021/08/21/%E7%BB%9F%E8%AE%A1salary%E7%9A%84%E7%B4%AF%E8%AE%A1%E5%92%8C%EF%BC%88%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%89/"/>
    <url>/2021/08/21/%E7%BB%9F%E8%AE%A1salary%E7%9A%84%E7%B4%AF%E8%AE%A1%E5%92%8C%EF%BC%88%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="统计salary的累计和running-total"><a href="#统计salary的累计和running-total" class="headerlink" title="统计salary的累计和running_total"></a>统计salary的累计和running_total</h3><p>按照salary的累计和running_total，其中running_total为前N个当前( to_date = ‘9999-01-01’)员工的salary累计和，其他以此类推。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `salaries` ( <br>    `emp_no` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `salary` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `from_date` <span class="hljs-type">date</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `to_date` <span class="hljs-type">date</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`emp_no`,`from_date`));<br></code></pre></td></tr></table></figure><p>输出格式：</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210821115541.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.emp_no, s.salary,<br><span class="hljs-built_in">sum</span>(salary) <span class="hljs-keyword">over</span> (<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> emp_no) <span class="hljs-keyword">as</span> running_total<br><span class="hljs-keyword">from</span> salaries s <span class="hljs-keyword">WHERE</span> to_date <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;9999-01-01&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>窗口函数用法：</strong></p><p>&lt;窗口函数&gt; OVER ( [PARTITION BY &lt;用于分组的列名&gt; ] ORDER BY &lt;用于排序的列名&gt; ）</p><p>*其中[ ]中的内容可以忽略</p><p><strong>&lt;窗口函数&gt;的位置，可以放以下两种函数：</strong></p><ul><li>专用窗口函数 rank，dense_rank，row_number等<ul><li>RANK()：在计算排序时，若存在相同位次，会跳过之后的位次（1，1，1，4）</li><li>DENSE_RANK()：在计算排序时，若存在相同位次，不会跳过之后的位次（1，1，1，2）</li><li>ROW_NUMBER()：这个函数赋予唯一的连续位次（前三条并列第一：1，2，3，4）</li></ul></li><li>聚合函数 如sum，avg，count，max，min等</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>薪水排名问题（自连接 &amp; &lt;=的使用）</title>
    <link href="/2021/08/13/%E8%96%AA%E6%B0%B4%E6%8E%92%E5%90%8D%E9%97%AE%E9%A2%98%EF%BC%88%E8%87%AA%E8%BF%9E%E6%8E%A5%E5%92%8C%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E%E5%8F%B7%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%89/"/>
    <url>/2021/08/13/%E8%96%AA%E6%B0%B4%E6%8E%92%E5%90%8D%E9%97%AE%E9%A2%98%EF%BC%88%E8%87%AA%E8%BF%9E%E6%8E%A5%E5%92%8C%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E%E5%8F%B7%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="查找薪水排名第二多的员工编号emp-no、薪水salary、last-name以及first-name，不能使用order-by"><a href="#查找薪水排名第二多的员工编号emp-no、薪水salary、last-name以及first-name，不能使用order-by" class="headerlink" title="查找薪水排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，不能使用order by"></a>查找薪水排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，不能使用order by</h3><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210813204531.png"></p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210813204601.png"></p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210813204643.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.emp_no, s.salary, e.last_name, e.first_name<br><span class="hljs-keyword">from</span> employees e <span class="hljs-keyword">join</span> salaries s <span class="hljs-keyword">on</span> e.emp_no <span class="hljs-operator">=</span> s.emp_no <br><span class="hljs-keyword">and</span> s.salary <span class="hljs-operator">=</span> <br>(<br>    <span class="hljs-keyword">select</span> s1.salary <span class="hljs-keyword">from</span> salaries s1 <span class="hljs-keyword">join</span> salaries s2 <span class="hljs-comment">-- 自连接</span><br>    <span class="hljs-keyword">on</span> s1.salary <span class="hljs-operator">&lt;=</span> s2.salary <span class="hljs-comment">-- 连接条件使用&lt;=</span><br>    <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> s1.salary<br>    <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> s2.salary) <span class="hljs-operator">=</span> <span class="hljs-number">2</span> <span class="hljs-comment">-- 筛选出小于等于前二的值 第三多就改成3（小于等于前三）</span><br>)<br></code></pre></td></tr></table></figure><p>本题的精髓在于 <strong><code>s1.salary &lt;= s2.salary</code>，意思是在输出s1.salary的情况下，有多少个s2.salary大于等于s1.salary</strong>，<code>having count(distinct s2.salary) = 2</code>筛选出有2个s2.salary大于等于s1.salary的，即为排名第二。</p><h3 id="对所有员工的薪水按照salary降序进行1-N的排名"><a href="#对所有员工的薪水按照salary降序进行1-N的排名" class="headerlink" title="对所有员工的薪水按照salary降序进行1-N的排名"></a>对所有员工的薪水按照salary降序进行1-N的排名</h3><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210821114105.png"></p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210821114124.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> s1.emp_no, s1.salary, <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> s2.salary) <span class="hljs-keyword">as</span> t_rank<br><span class="hljs-keyword">from</span> salaries s1 <span class="hljs-keyword">join</span> salaries s2<br><span class="hljs-keyword">on</span> s1.salary <span class="hljs-operator">&lt;=</span> s2.salary <span class="hljs-comment">-- 要加= 否则第一个rank就为0了</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> emp_no<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> s1.salary <span class="hljs-keyword">desc</span>, s1.emp_no <span class="hljs-keyword">asc</span><br></code></pre></td></tr></table></figure><p>例如：当s1.salary=72527时，有3个s2.salary（分别为88958，72527，72527）大于等于它，但由于72527重复，利用<code>count(distinct s2.salary)</code>去重可得工资为72527的t_rank等于2。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>回溯：全排列与N皇后</title>
    <link href="/2021/08/06/%E5%85%A8%E6%8E%92%E5%88%97%E4%B8%8EN%E7%9A%87%E5%90%8E/"/>
    <url>/2021/08/06/%E5%85%A8%E6%8E%92%E5%88%97%E4%B8%8EN%E7%9A%87%E5%90%8E/</url>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode-cn.com/problems/permutations/">46. 全排列 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p><a href="https://leetcode-cn.com/problems/n-queens/submissions/">51. N 皇后 - 力扣（LeetCode） (leetcode-cn.com)</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>参考博文：</p><p><a href="https://labuladong.gitbook.io/algo/mu-lu-ye-3/mu-lu-ye/hui-su-suan-fa-xiang-jie-xiu-ding-ban">回溯算法解题套路框架 - labuladong的算法小抄 (gitbook.io)</a></p><p><a href="https://leetcode-cn.com/problems/n-queens/solution/dai-ma-sui-xiang-lu-51-n-queenshui-su-fa-2k32/">「代码随想录」带你学透回溯算法！51. N-Queens - N 皇后 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>回溯算法的框架：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">result</span> = []<br>def backtrack(路径, 选择列表):<br>    <span class="hljs-keyword">if</span> 满足结束条件:<br>        <span class="hljs-built_in">result</span>.<span class="hljs-built_in">add</span>(路径)<br>        <span class="hljs-literal">return</span><br><br>    <span class="hljs-keyword">for</span> 选择 <span class="hljs-keyword">in</span> 选择列表:<br>        做选择<br>        backtrack(路径, 选择列表)<br>        撤销选择<br></code></pre></td></tr></table></figure><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210806185936.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="hljs-keyword">int</span>[] nums) &#123;<br>        LinkedList&lt;Integer&gt; track = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        backtrack(nums, track);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-comment">// nums 选择列表 track 路径 </span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, LinkedList&lt;Integer&gt; track)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(track.size() == nums.length) &#123;<br>            <span class="hljs-comment">// 不能写成res.add(track);否则结果为空</span><br>            <span class="hljs-comment">// Java值传递 复制的是变量的地址 实际指向同一块内存地址</span><br>            <span class="hljs-comment">// 在这里new一块新的内存空间存数据</span><br>            res.add(<span class="hljs-keyword">new</span> LinkedList(track));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(track.contains(nums[i])) <span class="hljs-keyword">continue</span>;<br>            track.add(nums[i]);<br>            <span class="hljs-comment">// 进入下一层 直到遍历完nums数组</span><br>            backtrack(nums, track);<br>            <span class="hljs-comment">// track.size() == nums.length条件成立</span><br>            <span class="hljs-comment">// return后移除最后一个 返回上一层</span><br>            track.removeLast();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="N皇后"><a href="#N皇后" class="headerlink" title="N皇后"></a>N皇后</h3><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210806190106.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    List&lt;List&lt;String&gt;&gt; res = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="hljs-keyword">int</span> n) &#123;<br>        <span class="hljs-comment">// 初始化棋盘</span><br>        <span class="hljs-keyword">char</span>[][] board = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[n][n];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span>[] c : board) &#123;<br>            <span class="hljs-comment">// 快速初始化 填充一个数组</span><br>            Arrays.fill(c, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        &#125;<br>        backtrack(n, <span class="hljs-number">0</span>, board);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> row, <span class="hljs-keyword">char</span>[][] board)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(row == n) &#123;<br>            res.add(Array2List(board));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 想象一棵树 只不过节点是棋盘 每一层代表棋盘的一行row</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> col = <span class="hljs-number">0</span>; col &lt; n; col++) &#123;<br>            <span class="hljs-comment">// 排除不合法情况</span><br>            <span class="hljs-keyword">if</span> (!isValid(row, col, n, board)) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-comment">// 处理节点</span><br>            board[row][col] = <span class="hljs-string">&#x27;Q&#x27;</span>;<br>            <span class="hljs-comment">// 进入下一层</span><br>            backtrack(n, row+<span class="hljs-number">1</span>, board);<br>            <span class="hljs-comment">// 回溯 撤销处理结果</span><br>            <span class="hljs-comment">// row == n满足条件 结果已保存 退回上一层</span><br>            board[row][col] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List <span class="hljs-title">Array2List</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board)</span> </span>&#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span>[] c : board) &#123;<br>            list.add(String.copyValueOf(c));<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">// 剪枝</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(<span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> col, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">char</span>[][] board)</span> </span>&#123;<br>        <span class="hljs-comment">// 列</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span>(board[i][col] == <span class="hljs-string">&#x27;Q&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 左上</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = row - <span class="hljs-number">1</span>, j = col - <span class="hljs-number">1</span>; i &gt;=<span class="hljs-number">0</span> &amp;&amp; j&gt;= <span class="hljs-number">0</span>; i--, j--) &#123;<br>            <span class="hljs-keyword">if</span>(board[i][j] == <span class="hljs-string">&#x27;Q&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 右上</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = row - <span class="hljs-number">1</span>, j = col + <span class="hljs-number">1</span>; i &gt;=<span class="hljs-number">0</span> &amp;&amp; j&lt; n; i--, j++) &#123;<br>            <span class="hljs-keyword">if</span>(board[i][j] == <span class="hljs-string">&#x27;Q&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决：org.apache.ibatis.binding.BindingException</title>
    <link href="/2021/08/02/Parameter/"/>
    <url>/2021/08/02/Parameter/</url>
    
    <content type="html"><![CDATA[<h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><p><code>org.apache.ibatis.binding.BindingException: Parameter &#39;courseId&#39; not found.</code></p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>Mybatis传递参数是按<strong>位置</strong>传递的，如果想要按<strong>值</strong>传递，需要加 <code>@Param</code> 注解</p><ul><li>参数通过<code>@Param</code>内的字段名称注入到sql语句对应位置</li></ul><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210802162655.png"></p>]]></content>
    
    
    <categories>
      
      <category>MyBatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>实现：双层锁防止Redis缓存击穿</title>
    <link href="/2021/08/02/%E5%8F%8C%E5%B1%82%E9%94%81%E9%98%B2%E6%AD%A2Redis%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/"/>
    <url>/2021/08/02/%E5%8F%8C%E5%B1%82%E9%94%81%E9%98%B2%E6%AD%A2Redis%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/</url>
    
    <content type="html"><![CDATA[<h3 id="假设情景"><a href="#假设情景" class="headerlink" title="假设情景"></a>假设情景</h3><p>高并发下，若干人同时进入<code>getAllCourse</code>方法查询课程信息，若在缓存中没找到结果，则这些人将同时访问数据库，Redis做缓存失去了应有的作用。</p><h4 id="模拟20个线程高并发"><a href="#模拟20个线程高并发" class="headerlink" title="模拟20个线程高并发"></a>模拟20个线程高并发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;getAllCourse&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Course&gt; <span class="hljs-title">getAllCourse</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 模拟多线程：创建一个容量20个的线程池</span><br>    ExecutorService es = Executors.newFixedThreadPool(<span class="hljs-number">20</span>);<br>    <span class="hljs-comment">// 模拟20个线程同时查询</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br>        es.submit(<span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                courseService.getAllCourse();<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">return</span> courseService.getAllCourse();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="双层检测锁-DCL：double-check-lock"><a href="#双层检测锁-DCL：double-check-lock" class="headerlink" title="双层检测锁 DCL：double check lock"></a>双层检测锁 DCL：double check lock</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CourseServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CourseService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CourseMapper courseMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;Object,Object&gt; redisTemplate;<br>    <br>    <span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Course&gt; <span class="hljs-title">getAllCourse</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//将redis内存中的序列化的集合名称用String重新命名（增加可读性）</span><br>    RedisSerializer rs = <span class="hljs-keyword">new</span> StringRedisSerializer();<br>    redisTemplate.setKeySerializer(rs);<br><br>    System.out.println(<span class="hljs-string">&quot;***查询redis***&quot;</span>);<br>    List&lt;Course&gt; list = (List&lt;Course&gt;)redisTemplate.opsForValue().get(<span class="hljs-string">&quot;allCourses&quot;</span>);<br>    <span class="hljs-keyword">if</span>(list == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-comment">//排队，让第一个人进，走一遍流程（后面的人就会走缓存了）</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>)&#123;<br>            list = (List&lt;Course&gt;)redisTemplate.opsForValue().get(<span class="hljs-string">&quot;allCourses&quot;</span>);<br>            <span class="hljs-keyword">if</span>(list == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">//去数据库</span><br>                System.out.println(<span class="hljs-string">&quot;===MySql数据库===&quot;</span>);<br>                list = courseMapper.getAllCourse();<br>                <span class="hljs-comment">// 把从数据库查询的集合放在redis内存中(key,value,过期时间,分钟为单位)</span><br>                redisTemplate.opsForValue().set(<span class="hljs-string">&quot;allCourses&quot;</span>, list,<span class="hljs-number">10</span>, TimeUnit.MINUTES);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="如何保证Redis中数据是最新的"><a href="#如何保证Redis中数据是最新的" class="headerlink" title="如何保证Redis中数据是最新的"></a>如何保证Redis中数据是最新的</h4><ol><li>先将Redis中的相关集合删除</li><li>将最新的数据保存到数据库</li><li>查询数据时，因为Redis中的数据已经删除了，所以会第一时间去数据库查询</li></ol>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>项目调试常用命令</title>
    <link href="/2021/08/02/%E9%A1%B9%E7%9B%AE%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/08/02/%E9%A1%B9%E7%9B%AE%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">systemctl stop firewalld<br></code></pre></td></tr></table></figure><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> 进程名称<br></code></pre></td></tr></table></figure><h3 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h3><p>查看所有</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -lntp</span><br></code></pre></td></tr></table></figure><p>查看指定</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">netstat -lntp <span class="hljs-string">| grep 端口号</span><br></code></pre></td></tr></table></figure><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>以配置文件的方式启动</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>redis-server <span class="hljs-regexp">/opt/</span>redis-<span class="hljs-number">5.0</span>.<span class="hljs-number">4</span>/redis.conf<br></code></pre></td></tr></table></figure><h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><p>单实例关闭</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">redis-cli shutdown<br></code></pre></td></tr></table></figure><p>多实例关闭</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">redis</span>-cli -p <span class="hljs-number">6379</span> shutdown<br></code></pre></td></tr></table></figure><h4 id="连接并测试"><a href="#连接并测试" class="headerlink" title="连接并测试"></a>连接并测试</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">redis-<span class="hljs-keyword">cli</span><br><span class="hljs-built_in">ping</span><br></code></pre></td></tr></table></figure><h3 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a>FastDFS</h3><h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/fdfs_trackerd /</span>etc<span class="hljs-regexp">/fdfs/</span>tracker.conf restart<br><span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/fdfs_storaged /</span>etc<span class="hljs-regexp">/fdfs/</span>storage.conf restart<br></code></pre></td></tr></table></figure><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><h4 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h4><p>启动代码格式：nginx安装目录地址 -c nginx配置文件地址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<span class="hljs-regexp">/nginx -c /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/conf/</span>nginx.conf<br></code></pre></td></tr></table></figure><h4 id="关闭-1"><a href="#关闭-1" class="headerlink" title="关闭"></a>关闭</h4><p>从容关闭</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> nginxkill -QUIT 进程号<br></code></pre></td></tr></table></figure><p>强制关闭</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pkill</span> -<span class="hljs-number">9</span> nginx<br></code></pre></td></tr></table></figure><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">start</span> rabbitmq-<span class="hljs-keyword">server</span>.service<br></code></pre></td></tr></table></figure><p>浏览器输入：<a href="http://192.168.xx:xxx:15672">http://192.168.xx:xxx:15672</a></p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><h4 id="启动-3"><a href="#启动-3" class="headerlink" title="启动"></a>启动</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> docker<br></code></pre></td></tr></table></figure><h4 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>docker.service<br></code></pre></td></tr></table></figure><blockquote><p>ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</p></blockquote><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210801222435.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl daemon-reload # 重新加载配置文件<br>service docker restart # 重启<br>dockernetstat -nlpt # 查看端口<br>curl http://192.168.xx.xxx:2375/version # 测试<br></code></pre></td></tr></table></figure><h4 id="IDEA镜像加速器"><a href="#IDEA镜像加速器" class="headerlink" title="IDEA镜像加速器"></a>IDEA镜像加速器</h4><blockquote><p><a href="https://owi3yzzk.mirror.aliyuncs.com/">https://owi3yzzk.mirror.aliyuncs.com</a></p></blockquote><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/d4.png"></p><h4 id="Docker的Maven插件"><a href="#Docker的Maven插件" class="headerlink" title="Docker的Maven插件"></a>Docker的Maven插件</h4><p><code>docker-maven-plugin</code>，自动生成镜像并推送到仓库中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.spotify<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>docker-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--镜像名称 robin/test-docker-demo--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">imageName</span>&gt;</span>robin/$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">imageName</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--标签版本--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">imageTags</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">imageTag</span>&gt;</span>latest<span class="hljs-tag">&lt;/<span class="hljs-name">imageTag</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">imageTags</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--基础镜像，相当于Dockerfile里的from--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">baseImage</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">baseImage</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--签名（作者）--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maintainer</span>&gt;</span>robin robin_liu_work@163.com<span class="hljs-tag">&lt;/<span class="hljs-name">maintainer</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--入口点，project.build.finalName就是project标签下的build标签下的filename标签内容 test-docker-demo--&gt;</span><br>        <span class="hljs-comment">&lt;!--相当于启动容器后，会自动执行java -jar/test-docker-demo.jar--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entryPoint</span>&gt;</span>[&quot;java&quot;, &quot;-jar&quot;, &quot;/$&#123;project.build.finalName&#125;.jar&quot;]<span class="hljs-tag">&lt;/<span class="hljs-name">entryPoint</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--docker地址--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dockerHost</span>&gt;</span>http://192.168.11.128:2375<span class="hljs-tag">&lt;/<span class="hljs-name">dockerHost</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 这里是复制 jar 包到 docker 容器指定目录配置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--复制的根目录，target--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--把哪个文件上传到docker 相当于Dockerfile里的add test-docker-demo.jar /--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p>进入项目根目录</p><p><strong>注意</strong>：除eureka外，其他项目配置文件中<code>eureka client</code>地址要改为虚拟机ip(Docker服务器的ip)</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210802102754.png"></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">mvn clean <span class="hljs-keyword">package</span> <span class="hljs-title">docker:build</span><br></code></pre></td></tr></table></figure><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210801231818.png"></p><p>报错</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210801231439.png"></p><p>修改<code>maven-resources-plugin</code>的版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210801231600.png"></p><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210801232145.png"></p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210801233048.png"></p><p>报错</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210801232922.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>libexec<span class="hljs-regexp">/docker/</span><br>ln -s docker-proxy-current docker-proxy<br></code></pre></td></tr></table></figure><p>端口重复分配</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210801233311.png"></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service docker restart</span><br></code></pre></td></tr></table></figure><p>再次报错</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210801233447.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>libexec<span class="hljs-regexp">/docker/</span><br>ln -s docker-runc-current docker-runc<br></code></pre></td></tr></table></figure><p>成功</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/image-20210801233611477.png"></p><p>查看正在运行的容器</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker ps</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>实现：Element UI 上传一张图片后隐藏上传按钮</title>
    <link href="/2021/08/01/Element%20UI%20%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%89%87%E5%90%8E%E9%9A%90%E8%97%8F%E4%B8%8A%E4%BC%A0%E6%8C%89%E9%92%AE%E5%8A%9F%E8%83%BD/"/>
    <url>/2021/08/01/Element%20UI%20%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%89%87%E5%90%8E%E9%9A%90%E8%97%8F%E4%B8%8A%E4%BC%A0%E6%8C%89%E9%92%AE%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><p><a href="https://blog.csdn.net/MYuanFang/article/details/106059423">Element UI 实现上传单个图片功能</a></p><p><a href="https://cn.vuejs.org/v2/guide/class-and-style.html">Class 与 Style 绑定</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h2 style=&quot;margin-bottom:10px&quot;&gt;上传单个图片&lt;/h2&gt;<br>    &lt;el-upload<br>        class=&quot;avatar-uploader&quot;<br>        action=&quot;https://jsonplaceholder.typicode.com/posts/&quot;<br>        list-type=&quot;picture-card&quot;<br>        :on-preview=&quot;handlePictureCardPreview&quot;<br>        :on-remove=&quot;handleRemove&quot;<br>        :http-request=&quot;httpRequest&quot;<br>        :class=&quot;&#123;&#x27;demo-httpRequestImg&#x27;:httpRequestImg&#125;&quot; &lt;!--绑定一个占位class--&gt;<br>        &gt;<br>        &lt;i class=&quot;el-icon-plus&quot;&gt;&lt;/i&gt;<br>    &lt;/el-upload&gt;<br>    &lt;el-dialog :visible.sync=&quot;dialogVisibleImg&quot; append-to-body class=&quot;ImgClass&quot;&gt;<br>        &lt;img width=&quot;100%&quot; :src=&quot;dialogImageUrl&quot; alt=&quot;&quot;&gt;<br>    &lt;/el-dialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br> <br>&lt;script&gt;<br>export default &#123;<br>  data()&#123;<br>    return&#123;<br>      dialogImageUrl: &#x27;&#x27;,//预览url<br>      dialogVisibleImg:false,<br>      httpRequestImg:false, // 展示upload图片<br>    &#125;<br>  &#125;,<br>  methods:&#123;<br>    httpRequest(a) &#123; //上传成功<br>      // 正常情况下会出现第二个图片框 true =&gt; display: none;<br>      this.httpRequestImg = true;<br>    &#125;,<br>    handlePictureCardPreview(file) &#123; //预览<br>      this.dialogImageUrl = file.url;<br>      this.dialogVisibleImg = true;<br>    &#125;,<br>    handleRemove(file, fileList) &#123; //删除<br>      this.httpRequestImg = false; // 展示upload图片<br>      console.log(file, fileList);<br>    &#125;,<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br> <br>&lt;style lang=&quot;less&quot; scoped&gt;<br>  .demo-httpRequestImg&#123;<br>    /deep/ .el-upload--picture-card&#123;<br>        display: none; // 重点在style里<br>    &#125;<br>  &#125; <br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210801020753.png" alt="改造前"></p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210801023945.png" alt="改造后"></p>]]></content>
    
    
    <categories>
      
      <category>FrontEnd</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决：URL访问不到FastDFS图片</title>
    <link href="/2021/07/30/URL%E8%AE%BF%E9%97%AE%E4%B8%8D%E5%88%B0FastDFS%E5%9B%BE%E7%89%87/"/>
    <url>/2021/07/30/URL%E8%AE%BF%E9%97%AE%E4%B8%8D%E5%88%B0FastDFS%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>在Linux系统中安装好Nginx和FastDFS</p><p>教程：<a href="https://blog.csdn.net/lovely__rr/article/details/109569124?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.pc_relevant_baidujshouduan&spm=1001.2101.3001.4242">整合FastDFS与Nginx 使生成的文件URL能够通过浏览器访问</a></p><h3 id="出错原因"><a href="#出错原因" class="headerlink" title="出错原因"></a>出错原因</h3><p>server中server_name和location没配好，原因是以前配过Nginx集群，修改时没注意细节</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210730234436.png" alt="网图 用来说明"></p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/image-20210730235223839.png"></p><h3 id="解决成功"><a href="#解决成功" class="headerlink" title="解决成功"></a>解决成功</h3><p>下图是调整好的</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210730231613.png"></p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/20210730234833.png"></p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决：gitee添加SSH公钥 指纹生成失败</title>
    <link href="/2021/07/16/gitee%E6%8C%87%E7%BA%B9%E7%94%9F%E6%88%90%E5%A4%B1%E8%B4%A5/"/>
    <url>/2021/07/16/gitee%E6%8C%87%E7%BA%B9%E7%94%9F%E6%88%90%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>已生成id_rsa.pub文件，且github配置ssh公钥成功</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>gitee添加ssh公钥，输完密码后弹出：指纹生成失败</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/image-20210716141949630.png"></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>我去看了.ssh文件夹</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/image-20210716142048988.png"></p><p>发现known_hosts里面已经有了gitee.com</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/image-20210716142113728.png"></p><p>于是我把它删除了，然后再次添加，显示成功</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/image-20210716142218033.png"></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决：启动CentOS7图形界面报错</title>
    <link href="/2021/07/14/%E5%90%AF%E5%8A%A8CentOS7%20A%20problem%20has%20occurred%20and%20the%20system%20can&#39;t%20recover%20Please%20contact%20a%20system%20administrator/"/>
    <url>/2021/07/14/%E5%90%AF%E5%8A%A8CentOS7%20A%20problem%20has%20occurred%20and%20the%20system%20can&#39;t%20recover%20Please%20contact%20a%20system%20administrator/</url>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>Windows 10 家庭中文版</p><p>VMware-workstation-full-15.0.2-10952284.exe</p><p>CentOS-7-x86_64-DVD-1503-01</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>安装完后出现如下画面：</p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/image-20210707135940197.png"></p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><h4 id="1-上网搜索，据说是图形界面崩溃，需要执行如下操作："><a href="#1-上网搜索，据说是图形界面崩溃，需要执行如下操作：" class="headerlink" title="1. 上网搜索，据说是图形界面崩溃，需要执行如下操作："></a>1. 上网搜索，据说是图形界面崩溃，需要执行如下操作：</h4><h5 id="1-1-ctrl-alt-f2进入命令行"><a href="#1-1-ctrl-alt-f2进入命令行" class="headerlink" title="1.1 ctrl + alt + f2进入命令行"></a>1.1 <code>ctrl + alt + f2</code>进入命令行</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum history package-list gjs<br>sudo yum history package-list gnome-shell<br>sudo yum update --skip-broken<br></code></pre></td></tr></table></figure><h5 id="1-2-执行第三句后报错：Cannot-find-a-valid-baseurl-for-repo-base-7-x86-64"><a href="#1-2-执行第三句后报错：Cannot-find-a-valid-baseurl-for-repo-base-7-x86-64" class="headerlink" title="1.2 执行第三句后报错：Cannot find a valid baseurl for repo: base/7/x86_64"></a>1.2 执行第三句后报错：Cannot find a valid baseurl for repo: base/7/x86_64</h5><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/image-20210707154454894.png"></p><h6 id="1-2-1-修改配置文件ifcfg-eno16777736"><a href="#1-2-1-修改配置文件ifcfg-eno16777736" class="headerlink" title="1.2.1 修改配置文件ifcfg-eno16777736"></a>1.2.1 修改配置文件<code>ifcfg-eno16777736</code></h6><p>进入<code>/etc/sysconfig/network-scripts</code>目录，查找<code>ifcfg</code>开头的文件，将配置<code>ONBOOT=no</code>，改为<code>ONBOOT=yes</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/sysconfig/network-scripts<br>ls<br><span class="hljs-meta">#</span><span class="bash"> 我的centos7 有ifcfg-eno16777736  ifcfg-lo两个文件 修改ifcfg-eno16777736文件中的配置即可</span><br>vi ifcfg-eno16777736<br></code></pre></td></tr></table></figure><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/image-20210707140945428.png"></p><h6 id="1-2-2-重启网络"><a href="#1-2-2-重启网络" class="headerlink" title="1.2.2 重启网络"></a>1.2.2 重启网络</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service network restart<br></code></pre></td></tr></table></figure><h5 id="1-3-重新执行第三句"><a href="#1-3-重新执行第三句" class="headerlink" title="1.3 重新执行第三句"></a>1.3 重新执行第三句</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum update --skip-broken<br></code></pre></td></tr></table></figure><p>进入漫长的下载过程，期间会有询问，都输入 <code>y</code></p><h4 id="2-重启CentOS7"><a href="#2-重启CentOS7" class="headerlink" title="2. 重启CentOS7"></a>2. 重启CentOS7</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo shutdown -r now<br></code></pre></td></tr></table></figure><h4 id="3-问题解决"><a href="#3-问题解决" class="headerlink" title="3. 问题解决"></a>3. 问题解决</h4><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/image-20210707160449424.png"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决：16GRAM + Windows10家庭版启动CentOS7蓝屏</title>
    <link href="/2021/07/14/16GRAM%20+%20Windows10%E5%AE%B6%E5%BA%AD%E7%89%88%E5%90%AF%E5%8A%A8CentOS7%E8%93%9D%E5%B1%8F/"/>
    <url>/2021/07/14/16GRAM%20+%20Windows10%E5%AE%B6%E5%BA%AD%E7%89%88%E5%90%AF%E5%8A%A8CentOS7%E8%93%9D%E5%B1%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>16GRAM是想说，肯定不是内存不够的问题。</p><p>Windows10家庭版是想说，一些解决方法里提到的关闭Hyper-V、关闭Device/Credenti，家庭版没有这两个选项。</p><h3 id="我的解决方法"><a href="#我的解决方法" class="headerlink" title="我的解决方法"></a>我的解决方法</h3><h4 id="1-启动虚拟机平台"><a href="#1-启动虚拟机平台" class="headerlink" title="1. 启动虚拟机平台"></a>1. 启动虚拟机平台</h4><h5 id="1-1-启用或关闭Windows功能"><a href="#1-1-启用或关闭Windows功能" class="headerlink" title="1.1 启用或关闭Windows功能"></a>1.1 启用或关闭Windows功能</h5><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/image-20210708151151898.png"></p><h5 id="1-2-启动虚拟机平台"><a href="#1-2-启动虚拟机平台" class="headerlink" title="1.2 启动虚拟机平台"></a>1.2 启动虚拟机平台</h5><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/image-20210708151510674.png"></p><h5 id="1-3-重启电脑即可进入"><a href="#1-3-重启电脑即可进入" class="headerlink" title="1.3 重启电脑即可进入"></a>1.3 重启电脑即可进入</h5><h4 id="2-新蓝屏bug：在该系统上全局禁用了虚拟机打印功能，不会为该虚拟机启用此功能"><a href="#2-新蓝屏bug：在该系统上全局禁用了虚拟机打印功能，不会为该虚拟机启用此功能" class="headerlink" title="2. 新蓝屏bug：在该系统上全局禁用了虚拟机打印功能，不会为该虚拟机启用此功能"></a>2. 新蓝屏bug：在该系统上全局禁用了虚拟机打印功能，不会为该虚拟机启用此功能</h4><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/image-20210708152322820.png"></p><h5 id="2-1-开启打印功能"><a href="#2-1-开启打印功能" class="headerlink" title="2.1 开启打印功能"></a>2.1 开启打印功能</h5><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/image-20210708152100783.png"></p><p><img src="https://image-for-robins-blog.oss-cn-shanghai.aliyuncs.com/img/image-20210708152223001.png"></p><h5 id="2-2-重启虚拟机即可进入"><a href="#2-2-重启虚拟机即可进入" class="headerlink" title="2.2 重启虚拟机即可进入"></a>2.2 重启虚拟机即可进入</h5>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
